import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-BGUIea1J.js";const i={},r=n("h1",{id:"阅读须知",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#阅读须知"},[n("span",null,"阅读须知")])],-1),u=n("p",null,"  本套教程侧重点在于使用 C++ 并发支持库进行多线程编程。我们假设读者最低水平为：C++11 + STL + template，可能没有接触过 C++ 标准并发库，假设略微了解操作系统基本知识。",-1),d={href:"https://github.com/Mq-b/Modern-Cpp-templates-tutorial",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,"《现代C++模板教程》",-1),m=t('<p>  本教程不保证你学习之后的成果，不过依然可以自信地说：<strong>本教程在中文社区的同类型教程中是绝对的第一</strong>。事实上只需要一句话就可以表达了——<strong>伟大无需多言</strong>。</p><h2 id="学习注意事项" tabindex="-1"><a class="header-anchor" href="#学习注意事项"><span>学习注意事项</span></a></h2><p>  我们的教程中常包含许多外部链接，这并非当前描述不足或者不够严谨，而是为了考虑读者的水平和可能的扩展学习需求。同时，也希望者能让读者避免获取二手知识与理解，我们提供的链接基本都是较为专业的文档或官方网站。</p><p>  虽然教程名为《现代 C++ 并发编程教程》，但我们也扩展涉及了许多其他知识，包括但不限于：Win32、POSIX API；MSVC STL、libstdc++、libc++ 对标准库的实现；GCC 与 MSVC 的编译器扩展，以及 Clang 对它们的兼容；使用 CMake + Qt 构建带 UI 的程序，展示多线程异步的必要性；不同架构的内存模型（例如 x86 架构内存模型：Total Store Order (TSO)，较为严格的内存模型）。</p><p>  既然强调了“<strong>现代</strong>”，那自然是全方面的，具体的读者会在学习中感受到的。</p>',5),h=n("code",null,"Clang",-1),_=n("code",null,"GCC",-1),v=n("code",null,"MSVC",-1),b=n("code",null,"Clang18",-1),g=n("code",null,"GCC14",-1),f={href:"https://godbolt.org/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://mq-b.github.io/Loser-HomeWork/src/%E5%8D%A2%E7%91%9F%E6%97%A5%E7%BB%8F/godbolt%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3",target:"_blank",rel:"noopener noreferrer"},x=t(`<h2 id="代码风格" tabindex="-1"><a class="header-anchor" href="#代码风格"><span>代码风格</span></a></h2><p>  我们的代码风格较为简洁明了，命名全部使用下划线连接，而不是驼峰命名法。花括号通常只占一行，简短的代码可以不额外占行。一般初始化时使用 <code>{}</code>，而非 <code>()</code> 或者 <code>=</code> 。这样简单直观，避免歧义和许多问题。<code>#include</code> 引入头文件时需要在尖括号或引号前后加空格。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span> <span class="token comment">// 空格</span></span>
<span class="token keyword">struct</span> <span class="token class-name">move_only</span> <span class="token punctuation">{</span>
    <span class="token function">move_only</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;默认构造&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token function">move_only</span><span class="token punctuation">(</span><span class="token keyword">const</span> move_only<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
    <span class="token function">move_only</span><span class="token punctuation">(</span>move_only<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;移动构造&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    move_only m<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 全部初始化为 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是标量类型，可能考虑使用复制初始化，而非 <code>{}</code>，如：<code>int n = 0;</code>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>  本教程长期维护，接受 pr 与 issue。</p><p>  好了，稍微了解了一下，我们可以开始进入正式的学习内容了。</p>`,7);function y(E,q){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,u,n("p",null,[s("  我们强调了模板，因为并发支持库的很多设施其实现是较为简单的，概念与使用，再结合源码讲解会更加简单直观，然而要想阅读学习源码，模板的知识必不可少。不需要模板的水平有多高，也不需要会什么元编程，但是基本的需求得能做到，得会，这里推荐一下："),n("a",d,[k,e(a)]),s("。")]),m,n("p",null,[s("  另外我们的代码都会测试三大编译器 "),h,s("、"),_,s("、"),v,s("。通常都会是最新的，"),b,s("、"),g,s("。我们的教程中常常会提供 "),n("a",f,[s("Complier Explorer"),e(a)]),s(" 的运行测试链接以确保正确性，以及方便读者的测试与学习。如果你对此网站的使用不熟悉，可以阅读"),n("a",C,[s("使用文档"),e(a)]),s("。")]),x])}const T=o(i,[["render",y],["__file","index.html.vue"]]),w=JSON.parse('{"path":"/md/","title":"阅读须知","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"学习注意事项","slug":"学习注意事项","link":"#学习注意事项","children":[]},{"level":2,"title":"代码风格","slug":"代码风格","link":"#代码风格","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1709094546000,"updatedTime":1716719550000,"contributors":[{"name":"mq白","email":"3326284481@qq.com","commits":3},{"name":"归故里","email":"3326284481@qq.com","commits":2}]},"readingTime":{"minutes":2.85,"words":855},"filePathRelative":"md/README.md","localizedDate":"2024年2月28日","excerpt":"\\n<p>  本套教程侧重点在于使用 C++ 并发支持库进行多线程编程。我们假设读者最低水平为：C++11 + STL + template，可能没有接触过 C++ 标准并发库，假设略微了解操作系统基本知识。</p>\\n<p>  我们强调了模板，因为并发支持库的很多设施其实现是较为简单的，概念与使用，再结合源码讲解会更加简单直观，然而要想阅读学习源码，模板的知识必不可少。不需要模板的水平有多高，也不需要会什么元编程，但是基本的需求得能做到，得会，这里推荐一下：<a href=\\"https://github.com/Mq-b/Modern-Cpp-templates-tutorial\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>《现代C++模板教程》</strong></a>。</p>"}');export{T as comp,w as data};
