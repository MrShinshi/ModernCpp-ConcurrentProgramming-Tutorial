import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as u,c as i,a as n,b as s,d as a,w as c,e as o}from"./app-BGUIea1J.js";const d={},r=n("h1",{id:"使用线程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用线程"},[n("span",null,"使用线程")])],-1),k={href:"https://zh.cppreference.com/w/cpp/thread/thread",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"std::thread",-1),m=n("code",null,"std::thread",-1),h=o(`<h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world"><span>Hello World</span></a></h2><p>在我们初学 C++ 的时候应该都写过这样一段代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello World!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),b={href:"https://zh.cppreference.com/w/cpp/io/manip/endl",target:"_blank",rel:"noopener noreferrer"},_=o(`<p>我们可以启动一个线程来做这件事情：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span>  <span class="token comment">// 引入线程支持头文件</span></span>

<span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">// 定义一个函数用作打印任务</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello World&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> hello <span class="token punctuation">}</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),g=n("code",null,"std::thread t{ hello };",-1),f=n("code",null,"t",-1),w=n("code",null,"hello",-1),y={href:"https://zh.cppreference.com/w/cpp/named_req/Callable",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"hello",-1),j=n("code",null,"t.join();",-1),x=n("code",null,"t",-1),z=n("code",null,"std::thread",-1),A={href:"https://zh.cppreference.com/w/cpp/error/terminate",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"std::terminate()",-1),B=n("code",null,"t",-1),C=n("code",null,"join()",-1),T={href:"https://zh.cppreference.com/w/cpp/thread/thread/joinable",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"std::thread::joinable()",-1),I=n("code",null,"false",-1),S=n("code",null,"std::thread",-1),D=n("code",null,"joinable()",-1),L=n("code",null,"true",-1),W=n("code",null,"std::terminate()",-1),P=n("hr",null,null,-1),R=n("p",null,"如你所见，std::thread 高度封装，其成员函数也很少，我们可以轻易的创建线程执行任务，不过，它的用法也还远不止如此，我们慢慢介绍。",-1),H=n("h2",{id:"当前环境支持并发线程数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#当前环境支持并发线程数"},[n("span",null,"当前环境支持并发线程数")])],-1),M={href:"https://zh.cppreference.com/w/cpp/thread/thread/hardware_concurrency",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"hardware_concurrency",-1),V=n("code",null,"std::thread",-1),N=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> n <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>thread<span class="token double-colon punctuation">::</span><span class="token function">hardware_concurrency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;支持 &quot;</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; 个并发线程。\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),U={href:"https://hansimov.gitbook.io/csapp/ch01-a-tour-of-computer-systems/1.9#id-1.-xian-cheng-ji-bing-fa",target:"_blank",rel:"noopener noreferrer"},G={href:"https://www.intel.cn/content/www/cn/zh/gaming/resources/hyper-threading.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.intel.cn/content/www/cn/zh/gaming/resources/hyper-threading.html",target:"_blank",rel:"noopener noreferrer"},Y=n("strong",null,"并行",-1),J=n("p",null,"AMD 超线程技术被称为 SMT（Simultaneous Multi-Threading），它与英特尔的技术实现有所不同，不过使用类似。",-1),K=o(`<p>举个例子：一款 4 核心 8 线程的 CPU，这里的 8 线程其实是指所谓的<em>逻辑处理器</em>，也意味着这颗 CPU 最多可并行执行 8 个任务。</p><p>我们的 <code>hardware_concurrency()</code> 获取的值自然也会是 <strong>8</strong>。</p><p>当然了，都 2024 年了，我们还得考虑一个问题：“ <em>英特尔从 12 代酷睿开始，为其处理器引入了全新的“<strong>大小核</strong>”混合设计架构</em>”。</p><p>比如我的 CPU <code>i7 13700H</code> 它是 14 核心，20 线程，有 6 个能效核，6 个性能核。不过我们说了，物理核心这个<em>通常</em>不看重，<code>hardware_concurrency()</code> 输出的值会为 20。</p><ul><li><strong>在进行多线程编程时，我们可以参考此值来确定创建的线程数量，以更好地利用当前硬件，从而提升程序性能。</strong></li></ul><hr><p>我们可以举个简单的例子运用这个值：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">ForwardIt</span><span class="token operator">&gt;</span>
<span class="token keyword">auto</span> <span class="token function">sum</span><span class="token punctuation">(</span>ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">using</span> value_type <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>iter_value_t<span class="token operator">&lt;</span>ForwardIt<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>size_t num_threads <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>thread<span class="token double-colon punctuation">::</span><span class="token function">hardware_concurrency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>ptrdiff_t distance <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">distance</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>distance <span class="token operator">&gt;</span> <span class="token number">1024000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 计算每个线程处理的元素数量</span>
        std<span class="token double-colon punctuation">::</span>size_t chunk_size <span class="token operator">=</span> distance <span class="token operator">/</span> num_threads<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>size_t remainder <span class="token operator">=</span> distance <span class="token operator">%</span> num_threads<span class="token punctuation">;</span>

        <span class="token comment">// 存储每个线程的结果</span>
        std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>value_type<span class="token operator">&gt;</span><span class="token function">results</span><span class="token punctuation">(</span>num_threads<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 存储关联线程的线程对象</span>
        std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>thread<span class="token operator">&gt;</span> threads<span class="token punctuation">;</span>

        <span class="token comment">// 创建并启动线程</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> first<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_threads<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">next</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> chunk_size <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> remainder <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            threads<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token operator">&amp;</span>results<span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token punctuation">{</span>
                results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">accumulate</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> value_type<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            start <span class="token operator">=</span> end<span class="token punctuation">;</span> <span class="token comment">// 开始迭代器不断向前</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 等待所有线程执行完毕</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> thread <span class="token operator">:</span> threads<span class="token punctuation">)</span>
            thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 汇总线程的计算结果</span>
        value_type total_sum <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">accumulate</span><span class="token punctuation">(</span>results<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> results<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value_type<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> total_sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    value_type total_sum <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">accumulate</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> value_type<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> total_sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),Q={href:"https://godbolt.org/z/8oq3MnvT5",target:"_blank",rel:"noopener noreferrer"},Z=n("p",null,[s("我们写了这样一个求和函数 "),n("code",null,"sum"),s("，接受两个迭代器计算它们范围中对象的和。")],-1),$=n("code",null,"value_type",-1),nn={href:"https://zh.cppreference.com/w/cpp/iterator/iter_t",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"std::iter_value_t",-1),an={href:"https://zh.cppreference.com/w/cpp/language/function#.E8.BF.94.E5.9B.9E.E7.B1.BB.E5.9E.8B.E6.8E.A8.E5.AF.BC",target:"_blank",rel:"noopener noreferrer"},tn=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">ForwardIt</span><span class="token operator">&gt;</span>
<span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>iterator_traits<span class="token operator">&lt;</span>ForwardIt<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value_type <span class="token function">sum</span><span class="token punctuation">(</span>ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),on={href:"https://godbolt.org/z/4E17nTs4d",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"num_threads",-1),en={href:"https://zh.cppreference.com/w/cpp/iterator/distance",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"std::distance",-1),ln=n("strong",null,[n("code",null,"1024000")],-1),un={href:"https://zh.cppreference.com/w/cpp/algorithm/accumulate",target:"_blank",rel:"noopener noreferrer"},dn=n("code",null,"std::accumulate",-1),rn=o("<p>多线程求和只需要介绍<strong>三个</strong>地方</p><ol><li><p><code>chunk_size</code> 是每个线程分配的任务，但是这是可能有余数的，比如 10 个任务分配三个线程，必然余 1。但是我们也需要执行这个任务，所以还定义了一个对象 <code>remainder</code> ，它存储的就是余数。</p></li><li><p><code>auto end = std::next(start, chunk_size + (i &lt; remainder ? 1 : 0));</code> 这行代码是获取当前线程的执行范围，其实也就是要 <code>chunk_size</code> 再加上我们的余数 <code>remainder</code> 。这里写了一个三目运算符是为了进行分配任务，比如：</p><p>假设有 3 个线程执行，并且余数是 2。那么，每个线程的处理情况如下：</p><ul><li>当 <code>i = 0</code> 时，由于 <code>0 &lt; 2</code>，所以这个线程会多分配一个元素。</li><li>当 <code>i = 1</code> 时，同样因为 <code>1 &lt; 2</code>，这个线程也会多分配一个元素。</li><li>当 <code>i = 2</code> 时，由于 <code>2 &gt;= 2</code>，所以这个线程只处理平均数量的元素。</li></ul><p>这确保了<strong>剩余</strong>的 2 个元素被分配给了前两个线程，而第三个线程只处理了平均数量的元素。这样就确保了所有的元素都被正确地分配给了各个线程进行处理。</p></li><li><p><code>auto start = first;</code> 在创建线程执行之前先定义了一个开始迭代器。在传递给线程执行的lambda表达式中，最后一行是：<code>start = end;</code> 这是为了让迭代器一直向前。</p></li></ol><p>由于求和不涉及数据竞争之类的问题，所以我们甚至可以在刚讲完 <code>Hello World</code> 就手搓了一个“<strong>并行求和</strong>”的简单的模板函数。主要的难度其实在于对 C++ 的熟悉程度，而非对线程类 <code>std::thread</code> 的使用了，这里反而是最简单的，无非是用容器存储线程对象管理，最后进行 <code>join()</code> 罢了。</p>",3),kn={href:"https://zh.cppreference.com/w/cpp/algorithm/reduce",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"std::reduce",-1),mn={href:"https://zh.cppreference.com/w/cpp/algorithm/execution_policy_tag",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"sum",-1),bn=o(`<h2 id="线程管理" tabindex="-1"><a class="header-anchor" href="#线程管理"><span>线程管理</span></a></h2><p>在 C++ 标准库中，没有直接管理线程的机制，只能通过对象关联线程后，通过该对象来管理线程。类 <code>std::thread</code> 的对象就是指代线程的对象，而我们本节说的“线程管理”，其实也就是指管理 <code>std::thread</code> 对象。</p><h3 id="启动新线程" tabindex="-1"><a class="header-anchor" href="#启动新线程"><span>启动新线程</span></a></h3><p>使用 C++ 线程库启动线程，就是构造 std::thread 对象。</p><blockquote><p>当然了，如果是<strong>默认构造</strong>之类的，那么 <code>std::thread</code> 线程对象没有关联线程的，自然也不会启动线程执行任务。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">;</span> <span class="token comment">//  构造不表示线程的新 std::thread 对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote>`,5),_n=n("code",null,"std::thread",-1),gn=n("code",null,"std::thread",-1),fn={href:"https://zh.cppreference.com/w/cpp/named_req/Callable",target:"_blank",rel:"noopener noreferrer"},wn=n("code",null,"operator()",-1),yn=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;operator()()const\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们显然没办法直接像函数使用函数名一样，使用“类名”，函数名可以隐式转换到指向它的函数指针，而类名可不会直接变成对象，我们想使用 <code>Task</code> 自然就得构造对象了</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> Task<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>直接创建临时对象即可，可以简化代码并避免引入不必要的局部对象。</p><p>不过有件事情需要注意，当我们使用函数对象用于构造 <code>std::thread</code> 的时候，如果你传入的是一个临时对象，且使用的<strong>都是 “<code>()</code>”小括号初始化</strong>，那么<strong>编译器会将此语法解析为函数声明</strong>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>thread <span class="token function">t</span><span class="token punctuation">(</span> <span class="token function">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数声明</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这被编译器解析为函数声明，是一个返回类型为 <code>std::thread</code>，函数名为 <code>t</code>，接受一个返回 <code>Task</code> 的空参的函数指针类型，也就是 <code>Task(*)()</code>。</p><p>之所以我们看着抽象是因为这里的形参是无名的，且写了个函数类型。</p><p>我们用一个简单的示例为你展示：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//#1 声明</span>
<span class="token keyword">void</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">//#2 定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>即使我还没有为你讲述概念，我相信你也发现了，#1 和 #2 的区别无非是，#1 省略了形参的名称，还有它的形参是函数类型而不是函数指针类型，没有 <strong><code>*</code></strong>。</p>`,11),En=n("strong",null,"函数类型 T 的形参会调整为具有类型“指向 T 的指针”",-1),jn={href:"https://zh.cppreference.com/w/cpp/language/function#.E5.BD.A2.E5.8F.82.E7.B1.BB.E5.9E.8B.E5.88.97.E8.A1.A8",target:"_blank",rel:"noopener noreferrer"},xn=o(`<p>显然，<code>int(int)</code> 是一个函数类型，它被调整为了一个指向这个函数类型的指针类型。</p><p>那么回到我们最初的：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>thread <span class="token function">t</span><span class="token punctuation">(</span> <span class="token function">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// #1 函数声明</span>
std<span class="token double-colon punctuation">::</span>thread <span class="token function">t</span><span class="token punctuation">(</span> <span class="token function">Task</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">// #2 函数定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>#2</code>我们写出了函数形参名称 <code>p</code>，再将函数类型写成函数指针类型，事实上<strong>完全等价</strong>。我相信，这样，也就足够了。</p><p>所以总而言之，建议使用 <code>{}</code> 进行初始化，这是好习惯，大多数时候它是合适的。</p>`,5),zn=n("code",null,"std::thread",-1),An={href:"https://cppinsights.io/s/c448ad3d",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://zh.cppreference.com/w/cpp/language/lambda#:~:text=lambda%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%98%AF%E7%BA%AF%E5%8F%B3%E5%80%BC%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E5%AE%83%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%98%AF%E7%8B%AC%E6%9C%89%E7%9A%84%E6%97%A0%E5%90%8D%E9%9D%9E%E8%81%94%E5%90%88%E4%BD%93%E9%9D%9E%E8%81%9A%E5%90%88%E4%BD%93%E9%9D%9E%E7%BB%93%E6%9E%84%E5%8C%96%E7%B1%BB%E7%B1%BB%E5%9E%8B%EF%BC%8C%E8%A2%AB%E7%A7%B0%E4%B8%BA%E9%97%AD%E5%8C%85%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},Bn=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>thread thread<span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello World!\\n&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,2),Cn=n("code",null,"std::thread",-1),Tn={href:"https://zh.cppreference.com/w/cpp/thread/thread/%7Ethread",target:"_blank",rel:"noopener noreferrer"},Fn=n("code",null,"std::thread::~thread",-1),In={href:"https://zh.cppreference.com/w/cpp/thread/thread/join",target:"_blank",rel:"noopener noreferrer"},Sn=n("code",null,"join()",-1),Dn={href:"https://zh.cppreference.com/w/cpp/thread/thread/detach",target:"_blank",rel:"noopener noreferrer"},Ln=n("code",null,"detach()",-1),Wn=n("p",null,[s("我们先前使用的就是 join()，我们聊一下 "),n("strong",null,"detach()"),s("，当 "),n("code",null,"std::thread"),s(" 线程对象调用了 detach()，那么就是线程对象放弃了对线程资源的所有权，不再管理此线程，允许此线程独立的运行，在线程退出时释放所有分配的资源。")],-1),Pn=n("p",null,[s("放弃了对线程资源的所有权，也就是线程对象没有关联活跃线程了，此时 joinable 为 "),n("strong",null,[n("code",null,"false")]),s("。")],-1),Rn={href:"https://zh.cppreference.com/w/cpp/language/ub",target:"_blank",rel:"noopener noreferrer"},Hn=o(`<p>比如函数结束，那么函数局部对象的生存期都已经结束了，都被销毁了，此时线程函数还持有函数局部对象的指针或引用。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">func</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">&amp;</span> m_i<span class="token punctuation">;</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token operator">:</span>m_i<span class="token punctuation">{</span> i <span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            m_i <span class="token operator">+=</span> i<span class="token punctuation">;</span>           <span class="token comment">// 可能悬空引用</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread my_thread<span class="token punctuation">{</span> func<span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    my_thread<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 分离，不等待线程结束</span>
<span class="token punctuation">}</span>                              <span class="token comment">// 分离的线程可能还在运行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>主线程（main）创建局部对象 n、创建线程对象 my_thread 启动线程，执行任务 <strong><code>func{n}</code></strong>，局部对象 n 的引用被子线程持有。传入 100 用于调用 func 的 operator(int)。</p></li><li><p><code>my_thread.detach();</code>，joinable() 为 <code>false</code>。线程分离，线程对象不再持有线程资源，线程独立的运行。</p></li><li><p>主线程不等待，此时分离的子线程可能没有执行完毕，但是主线程（main）已经结束，局部对象 <code>n</code> 生存期结束，被销毁，而此时子线程还持有它的引用，访问悬空引用，造成未定义行为。<code>my_thread</code> 已经没有关联线程资源，正常析构，没有问题。</p></li></ol><p>解决方法很简单，将 detach() 替换为 join()。</p><blockquote><p><strong>通常非常不推荐使用 detach()，因为程序员必须确保所有创建的线程正常退出，释放所有获取的资源并执行其它必要的清理操作。这意味着通过调用 detach() 放弃线程的所有权不是一种选择，因此 join 应该在所有场景中使用。</strong> 一些老式特殊情况不聊。</p></blockquote><p>另外提示一下，也<strong>不要想着</strong> detach() 之后，再次调用 join()</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>my_thread<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// todo..</span>
my_thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 函数结束</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>认为这样可以确保被分离的线程在这里阻塞执行完？</p><p>我们前面聊的很清楚了，detach() 是线程分离，<strong>线程对象放弃了线程资源的所有权</strong>，此时我们的 my_thread 它现在根本没有关联任何线程。调用 join() 是：“阻塞当前线程直至 *this 所标识的线程结束其执行”，我们的<strong>线程对象都没有线程，堵塞什么？执行什么呢？</strong></p><p>简单点说，必须是 std::thread 的 joinable() 为 true 即线程对象有活跃线程，才能调用 join() 和 detach()。</p><p>顺带的，我们还得处理线程运行后的异常问题，举个例子：你在一个函数中构造了一个 std::thread 对象，线程开始执行，函数继续执行下面别的代码，但是如果抛出了异常呢？下面我的 <strong>join() 就会被跳过</strong>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>thread my_thread<span class="token punctuation">{</span>func<span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//todo.. 抛出异常的代码</span>
my_thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>避免程序被抛出的异常所终止，在异常处理过程中调用 join()，从而避免线程对象析构产生问题。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">func</span><span class="token punctuation">;</span> <span class="token comment">// 复用之前</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> func<span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token comment">// todo.. 一些当前线程可能抛出异常的代码</span>
        <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
        <span class="token keyword">throw</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我知道你可能有很多疑问，我们既然 catch 接住了异常，为什么还要 throw？以及为什么我们要两个 join()？</p><p>这两个问题其实也算一个问题，如果代码里抛出了异常，就会跳转到 catch 的代码中，执行 join() 确保线程正常执行完成，线程对象可以正常析构。然而此时我们必须再次 throw 抛出异常，因为你要是不抛出，那么你不是还得执行一个 <code>t.join()</code>？显然逻辑不对，自然抛出。</p>`,16),Mn=n("strong",null,"函数产生的异常，由调用方进行处理",-1),Xn={href:"https://godbolt.org/z/jo5sPvPGE",target:"_blank",rel:"noopener noreferrer"},Vn=o(`<p>我知道你可能会想到：“我在 try 块中最后一行写一个 <code>t.join()</code> ，这样如果前面的代码没有抛出异常，就能正常的调用 join()，如果抛出了异常，那就调用 catch 中的 <code>t.join()</code> 根本不需要最外部 2 那里的 join()，也不需要再次 <code>throw</code> 抛出异常”</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> func<span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token comment">// todo.. 一些当前线程可能抛出异常的代码</span>
        <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// try 最后一行调用 join()</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果抛出异常，就在 这里调用 join()</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Nn={href:"https://godbolt.org/z/Wo7Tj95Tz",target:"_blank",rel:"noopener noreferrer"},Un=n("p",null,[n("strong",null,"但是这是不对的"),s("，你要注意我们的注释：“"),n("strong",null,"一些当前线程可能抛出异常的代码"),s("”，而不是 "),n("code",null,"f2()"),s("，我们的 "),n("code",null,"try"),s(),n("code",null,"catch"),s(" 只是为了让线程对象关联的线程得以正确执行完毕，以及线程对象正确析构。并没有处理什么其他的东西，不掩盖错误，try"),n("code",null,"块中的代码抛出了异常，"),s("catch` 接住了，我们理所应当再次抛出。")],-1),Gn=n("h3",{id:"raii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#raii"},[n("span",null,"RAII")])],-1),On={href:"https://zh.cppreference.com/w/cpp/language/raii",target:"_blank",rel:"noopener noreferrer"},Yn=o(`<p>简单的说是：<em><strong>构造函数申请资源，析构函数释放资源，让对象的生命周期和资源绑定</strong></em>。当异常抛出时，C++ 会自动调用对象的析构函数。</p><p>我们可以提供一个类，在析构函数中使用 join() 确保线程执行完成，线程对象正常析构。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">thread_guard</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>thread<span class="token operator">&amp;</span> m_t<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">thread_guard</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>thread<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token operator">:</span>m_t<span class="token punctuation">{</span> t <span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">thread_guard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;析构&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 打印日志 不用在乎</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_t<span class="token punctuation">.</span><span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 线程对象当前关联了活跃线程</span>
            m_t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">thread_guard</span><span class="token punctuation">(</span><span class="token keyword">const</span> thread_guard<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
    thread_guard<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> thread_guard<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> func<span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    thread_guard <span class="token function">g</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能抛出异常</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Jn=n("strong",null,"调用析构函数",-1),Kn=n("strong",null,"即使函数 f2() 抛出了一个异常，这个销毁依然会发生（前提是你捕获了这个异常）",-1),Qn={href:"https://godbolt.org/z/hn7Gced84",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://zh.cppreference.com/w/cpp/error/terminate",target:"_blank",rel:"noopener noreferrer"},$n=n("strong",null,"实现定义",-1),ns=n("p",null,[s("我们的测试代码是捕获了异常的，为了观测，看到它一定打印“"),n("em",null,"析构"),s("”。")],-1),ss=n("p",null,[s("在 thread_guard 的析构函数中，我们要判断 "),n("code",null,"std::thread"),s(" 线程对象现在是否有关联的活跃线程，如果有，我们才会执行 "),n("strong",null,[n("code",null,"join()")]),s("，阻塞当前线程直到线程对象关联的线程执行完毕。如果不想等待线程结束可以使用 "),n("code",null,"detach()"),s(" ，但是这让 "),n("code",null,"std::thread"),s(" 对象失去了线程资源的所有权，难以掌控，具体如何，看情况分析。")],-1),as=n("code",null,"=delete",-1),ts={href:"https://zh.cppreference.com/w/cpp/language/rule_of_three#.E4.BA.94.E4.B9.8B.E6.B3.95.E5.88.99",target:"_blank",rel:"noopener noreferrer"},os=n("strong",null,"阻止",-1),ps=o(`<p>不允许这些操作主要在于：这是个管理类，而且顾名思义，它就应该只是单纯的管理线程对象仅此而已，只保有一个引用，<strong>单纯的做好 RAII 的事情就行，允许其他操作没有价值。</strong></p><blockquote><p>严格来说其实这里倒也不算 RAII，因为 thread_guard 的构造函数其实并没有申请资源，只是保有了线程对象的引用，在析构的时候进行了 join() 。</p></blockquote><h3 id="传递参数" tabindex="-1"><a class="header-anchor" href="#传递参数"><span>传递参数</span></a></h3><p>向可调用对象或函数传递参数很简单，我们前面也都写了，只需要将这些参数作为 <code>std::thread</code> 的构造参数即可。需要注意的是，这些参数会复制到新线程的内存空间中，即使函数中的参数是引用，依然<strong>实际是复制</strong>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>thread <span class="token function">t</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线程对象 t 的构造没有问题，可以通过编译，但是这个 n 实际上并没有按引用传递，而按值复制的。我们可以打印地址来验证我们的猜想。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// a 并非引用了局部对象 n</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>a <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>n <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),es={href:"https://godbolt.org/z/TzWeW5rxh",target:"_blank",rel:"noopener noreferrer"},cs=n("strong",null,"const 的引用",-1),ls={href:"https://godbolt.org/z/3nMb4asnG",target:"_blank",rel:"noopener noreferrer"},us={href:"https://zh.cppreference.com/w/cpp/utility/functional/ref",target:"_blank",rel:"noopener noreferrer"},is=n("code",null,"std::ref",-1),ds=n("code",null,"std::cref",-1),rs=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>a <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>n <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">ref</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ks={href:"https://godbolt.org/z/hTP3ex4W7",target:"_blank",rel:"noopener noreferrer"},vs=n("strong",null,"ref",-1),ms=n("strong",null,"reference",-1),hs={href:"https://zh.cppreference.com/w/cpp/utility/functional/reference_wrapper",target:"_blank",rel:"noopener noreferrer"},bs=n("code",null,"std::reference_wrapper",-1),_s=o(`<p>“<strong>cref</strong>”呢？，这个“c”就是“<strong>const</strong>”，就是返回了 <code>std::reference_wrapper&lt;const T&gt;</code>。我们不详细介绍他们的实现，你简单认为<code>reference_wrapper</code>可以隐式转换为被包装对象的引用即可，</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>reference_wrapper<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">ref</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">&amp;</span> p <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token comment">// r 隐式转换为 n 的引用 此时 p 引用的就是 n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>reference_wrapper<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">cref</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> p <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token comment">// r 隐式转换为 n 的 const 的引用 此时 p 引用的就是 n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),gs={href:"https://www.bilibili.com/video/BV1np4y1j78L",target:"_blank",rel:"noopener noreferrer"},fs=n("hr",null,null,-1),ws=n("code",null,"void f(int, int&)",-1),ys=n("code",null,"std::ref",-1),Es=n("code",null,"void f(int, const int&)",-1),js={href:"https://godbolt.org/z/xhrhs6Ke5",target:"_blank",rel:"noopener noreferrer"},xs=n("strong",null,"编译错误",-1),zs=n("code",null,"std::thread",-1),As=n("strong",null,"右值表达式进行传递",-1),qs=n("strong",null,"只支持移动的类型",-1),Bs=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">move_only</span> <span class="token punctuation">{</span>
    <span class="token function">move_only</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;默认构造&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token function">move_only</span><span class="token punctuation">(</span><span class="token keyword">const</span> move_only<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
    <span class="token function">move_only</span><span class="token punctuation">(</span>move_only<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;移动构造&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>move_only<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    move_only obj<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> f<span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Cs={href:"https://godbolt.org/z/b6fYWaf3Y",target:"_blank",rel:"noopener noreferrer"},Ts=n("p",null,[s("没有 "),n("code",null,"std::ref"),s(" 自然是会保有一个副本，所以有两次移动构造，一次是被 "),n("code",null,"std::thread"),s(" 构造函数中初始化副本，一次是调用函数 "),n("code",null,"f"),s("。")],-1),Fs=n("p",null,[s("如果还有不理解，不用担心，记住，这一切的问题都会在后面的 "),n("a",{href:"#stdthread-%E7%9A%84%E6%9E%84%E9%80%A0-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90"},[n("code",null,"std::thread"),s(" 的构造-源码解析")]),s(" 解释清楚。")],-1),Is=n("hr",null,null,-1),Ss={href:"https://zh.cppreference.com/w/cpp/language/pointer#.E6.88.90.E5.91.98.E5.87.BD.E6.95.B0.E6.8C.87.E9.92.88",target:"_blank",rel:"noopener noreferrer"},Ds=n("strong",null,"成员函数指针",-1),Ls={href:"https://zh.cppreference.com/w/cpp/named_req/Callable",target:"_blank",rel:"noopener noreferrer"},Ws=n("em",null,"可调用",-1),Ps=n("em",null,"Callable",-1),Rs=n("code",null,"std::thread",-1),Hs=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">X</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">task_run</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

 X x<span class="token punctuation">;</span>
 <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
 std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> <span class="token operator">&amp;</span>X<span class="token double-colon punctuation">::</span>task_run<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span>n <span class="token punctuation">}</span><span class="token punctuation">;</span>
 t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传入成员函数指针、与其配合使用的对象、调用成员函数的参数，构造线程对象 <code>t</code>，启动线程。</p><p>如果你是第一次见到成员指针，那么我们稍微聊一下，<code>&amp;X::task_run</code> 是一个整体，它们构成了成员指针，<strong>&amp;类名::非静态成员</strong>。</p><p>成员指针必须和对象一起使用，这是唯一标准用法，成员指针不可以转换到函数指针单独使用，即使是非静态成员函数没有使用任何数据成员。</p>`,4),Ms={href:"https://zh.cppreference.com/w/cpp/utility/functional/bind",target:"_blank",rel:"noopener noreferrer"},Xs=n("code",null,"std::bind",-1),Vs=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>X<span class="token double-colon punctuation">::</span>task_run<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x <span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),Ns=n("code",null,"std::bind",-1),Us={href:"https://godbolt.org/z/c5bh8Easd",target:"_blank",rel:"noopener noreferrer"},Gs=n("strong",null,"复制",-1),Os=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">task_run</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>a <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

X x<span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>n <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>X<span class="token double-colon punctuation">::</span>task_run<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ys=n("code",null,"n",-1),Js=n("code",null,"std::ref",-1),Ks={href:"https://godbolt.org/z/P9Gn5b66W",target:"_blank",rel:"noopener noreferrer"},Qs=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>X<span class="token double-colon punctuation">::</span>task_run<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span><span class="token function">ref</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> f<span class="token punctuation">,</span><span class="token string">&quot;hello&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码创建了一个调用 <code>f(&quot;hello&quot;)</code> 的线程。注意，函数 <code>f</code> 实际需要的是一个 <code>std::string</code> 类型的对象作为参数，但这里使用的是字符串字面量，我们要明白“<em><strong>A的引用只能引用A，或者以任何形式转换到A</strong></em>”，字符串字面量的类型是 <code>const char[N]</code> ，它会退化成指向它的<code>const char*</code> 指针，被线程对象保存。在调用 <code>f</code> 的时候，这个指针可以通过 <code>std::string</code> 的转换构造函数，构造出一个临时的 <code>std::string</code> 对象，就能成功调用。</p>`,4),Zs={href:"https://zh.cppreference.com/w/cpp/language/storage_duration#.E5.AD.98.E5.82.A8.E6.9C.9F",target:"_blank",rel:"noopener noreferrer"},$s=n("em",null,"存储期",-1),na=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//todo.. code</span>
    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> f<span class="token punctuation">,</span>buffer <span class="token punctuation">}</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),sa=n("code",null,"std::thread",-1),aa={href:"https://zh.cppreference.com/w/cpp/standard_library/decay-copy",target:"_blank",rel:"noopener noreferrer"},ta=n("em",null,[n("code",null,"decay-copy")],-1),oa=n("strong",null,"隐式转换为了指向这个数组的指针",-1),pa=n("p",null,[s("我们要特别强调，"),n("code",null,"std::thread"),s(" 构造是代表“启动线程”，而不是调用我们传递的可调用对象。")],-1),ea=n("code",null,"std::thread",-1),ca={href:"https://learn.microsoft.com/zh-cn/cpp/c-runtime-library/reference/beginthread-beginthreadex?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},la=n("code",null,"_beginthreadex",-1),ua=n("code",null,"f",-1),ia=n("code",null,"f(buffer)",-1),da=n("code",null,"std::thread",-1),ra=n("code",null,"test",-1),ka=n("code",null,"f(buffer)",-1),va=n("code",null,"std::string",-1),ma=n("strong",null,"悬空",-1),ha=o(`<ol><li><p>将 <code>detach()</code> 替换为 <code>join()</code>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//todo.. code</span>
    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> f<span class="token punctuation">,</span>buffer <span class="token punctuation">}</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>显式将 <code>buffer</code> 转换为 <code>std::string</code>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//todo.. code</span>
    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> f<span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="std-this-thread" tabindex="-1"><a class="header-anchor" href="#std-this-thread"><span><code>std::this_thread</code></span></a></h3><p>这个命名空间包含了管理当前线程的函数。</p>`,3),ba={href:"https://zh.cppreference.com/w/cpp/thread/yield",target:"_blank",rel:"noopener noreferrer"},_a=n("code",null,"yield",-1),ga={href:"https://zh.cppreference.com/w/cpp/thread/get_id",target:"_blank",rel:"noopener noreferrer"},fa=n("code",null,"get_id",-1),wa={href:"https://zh.cppreference.com/w/cpp/thread/sleep_for",target:"_blank",rel:"noopener noreferrer"},ya=n("code",null,"sleep_for",-1),Ea={href:"https://zh.cppreference.com/w/cpp/thread/sleep_until",target:"_blank",rel:"noopener noreferrer"},ja=n("code",null,"sleep_until",-1),xa=n("strong",null,"停止到",-1),za=n("p",null,[s("它们之中最常用的是 "),n("code",null,"get_id"),s("，其次是 "),n("code",null,"sleep_for"),s("，再然后 "),n("code",null,"yield"),s("，"),n("code",null,"sleep_until"),s(" 较少。")],-1),Aa=n("code",null,"get_id",-1),qa={href:"https://godbolt.org/z/fPcaj7xTv",target:"_blank",rel:"noopener noreferrer"},Ba=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ca=o(`<p>使用 <code>sleep_for</code> 延时。当 <code>Sleep</code> 之类的就行，但是它需要接受的参数不同，是 <code>std::chrono</code> 命名空间中的时间对象。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Ta=n("code",null,"seconds",-1),Fa={href:"https://zh.cppreference.com/w/cpp/chrono/duration",target:"_blank",rel:"noopener noreferrer"},Ia=n("code",null,"std::chrono::duration",-1),Sa={href:"https://zh.cppreference.com/w/cpp/symbol_index/chrono_literals",target:"_blank",rel:"noopener noreferrer"},Da={href:"https://github.com/microsoft/STL/blob/8e2d724cc1072b4052b14d8c5f81a830b8f1d8cb/stl/inc/__msvc_chrono.hpp#L718-L780",target:"_blank",rel:"noopener noreferrer"},La=n("code",null,"std::chrono_literals",-1),Wa=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>chrono_literals<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span><span class="token number">3</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单直观。</p>`,2),Pa=o(`<li><p><code>yield</code> 减少 CPU 的占用。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线程需要等待某个操作完成，如果你直接用一个循环不断判断这个操作是否完成就会使得这个线程占满 CPU 时间，这会造成资源浪费。此时可以判断操作是否完成，如果还没完成就调用 yield 交出 CPU 时间片让其他线程执行，过一会儿再来判断是否完成，这样这个线程占用 CPU 时间会大大减少。</p></li>`,1),Ra=o(`<p>使用 <code>sleep_until</code> 让当前线程延迟到具体的时间。我们延时 5 秒就是。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前时间点</span>
    <span class="token keyword">auto</span> now <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>system_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置要等待的时间点为当前时间点之后的5秒</span>
    <span class="token keyword">auto</span> wakeup_time <span class="token operator">=</span> now <span class="token operator">+</span> <span class="token number">5</span>s<span class="token punctuation">;</span>

    <span class="token comment">// 输出当前时间</span>
    <span class="token keyword">auto</span> now_time <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>system_clock<span class="token double-colon punctuation">::</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Current time:\\t\\t&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">put_time</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now_time<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;%H:%M:%S&quot;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token comment">// 输出等待的时间点</span>
    <span class="token keyword">auto</span> wakeup_time_time <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>system_clock<span class="token double-colon punctuation">::</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>wakeup_time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Waiting until:\\t\\t&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">put_time</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wakeup_time_time<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;%H:%M:%S&quot;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token comment">// 等待到指定的时间点</span>
    std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_until</span><span class="token punctuation">(</span>wakeup_time<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 输出等待结束后的时间</span>
    now <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>system_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    now_time <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>system_clock<span class="token double-colon punctuation">::</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Time after waiting:\\t&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">put_time</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now_time<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;%H:%M:%S&quot;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Ha=n("code",null,"sleep_until",-1),Ma={href:"https://godbolt.org/z/4qYGbcvYW",target:"_blank",rel:"noopener noreferrer"},Xa=o(`<p>介绍了一下 <code>std::this_thread</code> 命名空间中的四个函数的基本用法，我们后续会经常看到这些函数的使用，不用着急。</p><h3 id="std-thread-转移所有权" tabindex="-1"><a class="header-anchor" href="#std-thread-转移所有权"><span><code>std::thread</code> 转移所有权</span></a></h3><p>传入可调用对象以及参数，构造 <code>std::thread</code> 对象，启动线程，而线程对象拥有了线程的所有权，线程是一种系统资源，所以可称作“<em>线程资源</em>”。</p><p>std::thread 不可复制。两个 std::thread 对象不可表示一个线程，std::thread 对线程资源是独占所有权。而<strong>移动</strong>操作可以将一个 <code>std::thread</code> 对象的线程资源所有权转移给另一个 <code>std::thread</code> 对象。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span><span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 线程对象 t 当前关联了活跃线程 打印 1</span>
    std<span class="token double-colon punctuation">::</span>thread t2<span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// 将 t 的线程资源的所有权移交给 t2</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span><span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 线程对象 t 当前没有关联活跃线程 打印 0</span>
    <span class="token comment">//t.join(); // Error! t 没有线程资源</span>
    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// t2 当前持有线程资源</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码通过<strong>移动构造</strong>转移了线程对象 <code>t</code> 的线程资源所有权到 <code>t2</code>，这里虽然有两个 <code>std::thread</code> 对象，但是从始至终只有一个线程资源，让持有线程资源的 <code>t2</code> 对象最后调用 <code>join()</code> 堵塞让其线程执行完毕。<code>t</code> 与 <code>t2</code> 都能正常析构。</p><p>我们还可以使用移动赋值来转移线程资源的所有权：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">;</span>      <span class="token comment">// 默认构造，没有关联活跃线程</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span><span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
    std<span class="token double-colon punctuation">::</span>thread t2<span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    t <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转移线程资源的所有权到 t</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span><span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    t2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需要介绍 <code>t2 = std::thread([] {})</code> ，临时对象是右值表达式，不用调用 <code>std::move</code>，这里相当于是将临时的 <code>std::thread</code> 对象所持有的线程资源转移给 <code>t2</code>，<code>t2</code> 再调用 <code>join()</code> 正常析构。</p><p>函数返回 <code>std::thread</code> 对象：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>thread <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>thread rt <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rt<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),Va={href:"https://godbolt.org/z/14d7b9qn9",target:"_blank",rel:"noopener noreferrer"},Na=n("code",null,"std::thread",-1),Ua=o(`<p>这里的 <code>return t</code> <em>重载决议</em><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>选择到了<strong>移动构造</strong>，将 <code>t</code> 线程资源的所有权转移给函数调用 <code>f()</code> 返回的临时 <code>std::thread</code> 对象中，然后这个临时对象再用来初始化 <code>rt</code> ，临时对象是右值表达式，这里一样选择到<strong>移动构造</strong>，将临时对象的线程资源所有权移交给 <code>rt</code>。此时 <code>rt</code> 具有线程资源的所有权，由它调用 <code>join()</code> 正常析构。</p><blockquote><p>如果标准达到 C++17，强制的复制消除（RVO）保证这里少一次移动构造的开销（临时对象初始化 <code>rt</code> 的这次）。</p></blockquote><p><strong>所有权也可以在函数内部传递</strong>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">)</span><span class="token punctuation">{</span>
    t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">f</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">f</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>thread<span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>std::move</code> 将 t 转换为了一个右值表达式，初始化函数<code>f</code> 形参 <code>t</code>，选择到了移动构造转移线程资源的所有权，在函数中调用 <code>t.join()</code> 后正常析构。<code>std::thread{ [] {} }</code> 构造了一个临时对象，本身就是右值表达式，初始化函数<code>f</code> 形参 <code>t</code>，移动构造转移线程资源的所有权到 <code>t</code>，<code>t.join()</code> 后正常析构。</p><p>本节内容总体来说是很简单的，如果你有些地方无法理解，那只有一种可能，“对移动语义不了解”，不过这也不是问题，在后续我们详细介绍 <code>std::thread</code> 构造函数的源码即可，不用着急。</p>`,6),Ga={id:"std-thread-的构造-源码解析",tabindex:"-1"},Oa={class:"header-anchor",href:"#std-thread-的构造-源码解析"},Ya=n("code",null,"std::thread",-1),Ja=n("p",null,[s("我们上一个大节讲解了线程管理，也就是 "),n("code",null,"std::thread"),s(" 的使用，其中的重中之重就是它的构造，传递参数。我们用源码实现为各位从头讲解。")],-1),Ka=n("p",null,"了解其实现，才能更好的使用它，同时也能解释其使用与学习中的各种问题。如：",-1),Qa=n("li",null,"为什么默认按值复制？",-1),Za=n("li",null,[s("为什么需要 "),n("code",null,"std::ref"),s(" ？")],-1),$a=n("li",null,"如何支持只能移动的对象？",-1),nt={href:"https://zh.cppreference.com/w/cpp/named_req/Callable",target:"_blank",rel:"noopener noreferrer"},st=n("li",null,"如何创建的线程？",-1),at=n("li",null,[n("a",{href:"#%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0"},"传递参数"),s("一节中的：“"),n("em",null,[n("code",null,"std::thread"),s(" 内部会将保有的参数副本转换为"),n("strong",null,"右值表达式进行传递")]),s("”到底是如何做到的？")],-1),tt=n("strong",null,[n("code",null,"std::thread"),s(" 的构造-源码解析")],-1),ot=o(`<h2 id="实现-joining-thread" tabindex="-1"><a class="header-anchor" href="#实现-joining-thread"><span>实现 <code>joining_thread</code></span></a></h2><p>这个类和 <code>std::thread</code> 的区别就是析构函数会自动 <code>join</code> 。如果您好好的学习了上一节的内容，阅读了 <code>std::thread</code> 的源码，以下内容不会对您构成任何的难度。</p><p>我们存储一个 <code>std::thread</code> 作为底层数据成员，稍微注意一下构造函数和赋值运算符的实现即可。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">joining_thread</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>thread t<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">joining_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">noexcept</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Callable</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">&gt;</span>
    <span class="token keyword">explicit</span> <span class="token function">joining_thread</span><span class="token punctuation">(</span>Callable<span class="token operator">&amp;&amp;</span> func<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token operator">:</span>
        t<span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>Callable<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>Args<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">explicit</span> <span class="token function">joining_thread</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>thread t_<span class="token punctuation">)</span><span class="token keyword">noexcept</span> <span class="token operator">:</span> t<span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>t_<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">joining_thread</span><span class="token punctuation">(</span>joining_thread<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span><span class="token keyword">noexcept</span> <span class="token operator">:</span> t<span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>t<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    joining_thread<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>thread<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span><span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果当前有活跃线程，那就先执行完</span>
            <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        t <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">joining_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>joining_thread<span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
        t<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>thread<span class="token double-colon punctuation">::</span>id <span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        t<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>thread<span class="token operator">&amp;</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>thread<span class="token operator">&amp;</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),pt={href:"https://godbolt.org/z/bM7Ka7be5",target:"_blank",rel:"noopener noreferrer"},et=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    joining_thread thread<span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    joining_thread thread2<span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用容器管理线程对象，等待线程执行结束</strong>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">do_work</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t id<span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> id <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>thread<span class="token operator">&gt;</span>threads<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        threads<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>do_work<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 产生线程</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> thread<span class="token operator">:</span>threads<span class="token punctuation">)</span><span class="token punctuation">{</span>
        thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 对每个线程对象调用 join()</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),ct={href:"https://godbolt.org/z/rf4h7s63M",target:"_blank",rel:"noopener noreferrer"},lt=o(`<p>线程对象代表了线程，管理线程对象也就是管理线程，这个 <code>vector</code> 对象管理 10 个线程，保证他们的执行、退出。</p><p>使用我们这节实现的 <code>joining_thread</code> 则不需要最后的循环 <code>join()</code>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>joining_thread<span class="token operator">&gt;</span>threads<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        threads<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>do_work<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),ut={href:"https://godbolt.org/z/8qa95vMz4",target:"_blank",rel:"noopener noreferrer"},it=o('<p>如果你自己编译了这些代码，相信你注意到了，打印的是乱序的，没什么规律，而且重复运行的结果还不一样，<strong>这是正常现象</strong>。多线程执行就是如此，无序且操作可能被打断。使用互斥量可以解决这些问题，这也就是下一章节的内容了。</p><h2 id="c-20-std-jthread" tabindex="-1"><a class="header-anchor" href="#c-20-std-jthread"><span>C++20 <code>std::jthread</code></span></a></h2><p><code>std::jthread</code> 相比于 C++11 引入的 <code>std::thread</code>，只是多了两个功能：</p><ol><li><p><strong>RAII 管理</strong>：在析构时自动调用 <code>join()</code>。</p></li><li><p><strong>线程停止功能</strong>：线程的取消/停止。</p></li></ol><h3 id="零开销原则" tabindex="-1"><a class="header-anchor" href="#零开销原则"><span>零开销原则</span></a></h3><p>我知道你肯定有疑问，为什么 C++20 不直接为 <code>std::thread</code> 增加这两个功能，而是创造一个新的线程类型呢？</p><p>这就是 C++ 的设计哲学，<em><strong>零开销原则</strong></em>：<em>你不需要为你没有用到的（特性）付出额外的开销</em>。</p>',7),dt=n("code",null,"std::jthread",-1),rt=n("code",null,"std::thread",-1),kt={href:"https://zh.cppreference.com/w/cpp/thread/stop_source",target:"_blank",rel:"noopener noreferrer"},vt=n("code",null,"std::stop_source",-1),mt=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>thread _Impl<span class="token punctuation">;</span>
stop_source _Ssource<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ht={href:"https://github.com/microsoft/STL/blob/23344e2/stl/inc/thread#L435-L436",target:"_blank",rel:"noopener noreferrer"},bt={href:"https://github.com/gcc-mirror/gcc/blob/1a5e4dd/libstdc%2B%2B-v3/include/std/thread#L290-L291",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://github.com/llvm/llvm-project/blob/7162fd7/libcxx/include/__thread/jthread.h#L125-L126",target:"_blank",rel:"noopener noreferrer"},gt=o('<p><code>stop_source</code> 通常占 8 字节，先前 <code>std::thread</code> 源码解析详细聊过其不同标准库对其保有的成员不同，简单来说也就是 64 位环境，大小为 16 或者 8。也就是 <code>sizeof(std::jthread)</code> 的值相比 <code>std::thread</code> 会多 8 ，为 <code>24</code> 或 <code>16</code>。</p><p>引入 <code>std::jthread</code> 符合<em>零开销原则</em>，它通过创建新的类型提供了更多的功能，而没有影响到原来 <code>std::thread</code> 的性能和内存占用。</p><h3 id="线程停止" tabindex="-1"><a class="header-anchor" href="#线程停止"><span>线程停止</span></a></h3><p>第一个功能很简单，不用赘述，我们直接聊这个所谓的“<strong>线程停止</strong>”就好。</p>',4),ft=n("code",null,"std::jthread",-1),wt={href:"https://pubs.opengroup.org/onlinepubs/9699919799/",target:"_blank",rel:"noopener noreferrer"},yt=n("code",null,"pthread_cancel",-1),Et=n("code",null,"pthread_cancel",-1),jt=n("sup",{class:"footnote-ref"},[n("a",{href:"#footnote2"},"[2]"),n("a",{class:"footnote-anchor",id:"footnote-ref2"})],-1),xt=n("code",null,"std::jthread",-1),zt=n("strong",null,"基于用户代码的控制机制",-1),At=n("code",null,"std::stop_source",-1),qt={href:"https://zh.cppreference.com/w/cpp/thread/stop_token",target:"_blank",rel:"noopener noreferrer"},Bt=n("code",null,"std::stop_token",-1),Ct=n("strong",null,"但实际上停止的决定和实现都由用户代码来完成",-1),Tt=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>literals<span class="token double-colon punctuation">::</span>chrono_literals<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>stop_token stop_token<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stop_token<span class="token punctuation">.</span><span class="token function">stop_requested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 检查是否已经收到停止请求</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>flush<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span><span class="token number">200</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>jthread thread<span class="token punctuation">{</span> f<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 打印 1..15 大约 3 秒</span>
    std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span><span class="token number">3</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// jthread 的析构函数调用 request_stop() 和 join()。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ft={href:"https://godbolt.org/z/dz43PT51c",target:"_blank",rel:"noopener noreferrer"},It=n("code",null,"2024/5/29",-1),St=n("code",null,"libc++",-1),Dt=n("code",null,"std::jthread",-1),Lt=n("code",null,"clang",-1),Wt=n("code",null,"libstdc++",-1),Pt=n("code",null,"MSVC STL",-1),Rt=n("code",null,"libc++",-1),Ht={href:"https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-fexperimental-library",target:"_blank",rel:"noopener noreferrer"},Mt=n("code",null,"-fexperimental-library",-1),Xt=o(`<p><code>std::jthread</code> 提供了三个成员函数进行所谓的<strong>线程停止</strong>：</p><ul><li><p><code>get_stop_source</code>：返回与 <code>jthread</code> 对象关联的 <code>std::stop_source</code>，允许从外部请求线程停止。</p></li><li><p><code>get_stop_token</code>：返回与 <code>jthread</code> 对象<strong>停止状态</strong><sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>关联的 <code>std::stop_token</code>，允许检查是否有停止请求。</p></li><li><p><code>request_stop</code>：请求线程停止。</p></li></ul><p>上面这段代码并未出现这三个函数的任何一个调用，不过在 <code>jthread</code> 的析构函数中，会调用 <code>request_stop</code> 请求线程停止。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">_Try_cancel_and_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_Impl<span class="token punctuation">.</span><span class="token function">joinable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _Ssource<span class="token punctuation">.</span><span class="token function">request_stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _Impl<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">~</span><span class="token function">jthread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">_Try_cancel_and_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于 <code>std::jthread thread{ f, 1 };</code> 函数 f 的 <code>std::stop_token</code> 的形参是谁传递的？其实就是线程对象自己调用 <code>get_token()</code> 传递的 ，源码一眼便可发现：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Fn</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token punctuation">,</span> enable_if_t<span class="token operator">&lt;</span><span class="token operator">!</span>is_same_v<span class="token operator">&lt;</span>remove_cvref_t<span class="token operator">&lt;</span>_Fn<span class="token operator">&gt;</span><span class="token punctuation">,</span> jthread<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">&gt;</span>
_NODISCARD_CTOR_JTHREAD <span class="token keyword">explicit</span> <span class="token function">jthread</span><span class="token punctuation">(</span>_Fn<span class="token operator">&amp;&amp;</span> _Fx<span class="token punctuation">,</span> _Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Ax<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>is_invocable_v<span class="token operator">&lt;</span>decay_t<span class="token operator">&lt;</span>_Fn<span class="token operator">&gt;</span><span class="token punctuation">,</span> stop_token<span class="token punctuation">,</span> decay_t<span class="token operator">&lt;</span>_Args<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _Impl<span class="token punctuation">.</span><span class="token function">_Start</span><span class="token punctuation">(</span>_STD <span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Fn<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_Fx<span class="token punctuation">)</span><span class="token punctuation">,</span> _Ssource<span class="token punctuation">.</span><span class="token function">get_token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _STD <span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_Ax<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        _Impl<span class="token punctuation">.</span><span class="token function">_Start</span><span class="token punctuation">(</span>_STD <span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Fn<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_Fx<span class="token punctuation">)</span><span class="token punctuation">,</span> _STD <span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_Ax<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说虽然最初的那段代码看似什么都没调用，但是实际什么都调用了。这所谓的线程停止，其实简单来说，有点像外部给线程传递信号一样。</p><hr><p><strong><code>std::stop_source</code></strong>：</p><ul><li>这是一个可以发出停止请求的类型。当你调用 <code>stop_source</code> 的 <code>request_stop()</code> 方法时，它会设置内部的停止状态为“已请求停止”。</li><li>任何持有与这个 <code>stop_source</code> 关联的 <code>std::stop_token</code> 对象都能检查到这个停止请求。</li></ul><p><strong><code>std::stop_token</code></strong>：</p><ul><li>这是一个可以检查停止请求的类型。线程内部可以定期检查 <code>stop_token</code> 是否收到了停止请求。</li><li>通过调用 <code>stop_token.stop_requested()</code>，线程可以检测到停止状态是否已被设置为“已请求停止”。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><strong>零开销原则</strong>应当很好理解。我们本节的难点只在于使用到了一些 MSVC STL 的源码实现来配合理解，其主要在于“线程停止”。线程停止设施你会感觉是一种类似与外部与线程进行某种信号通信的设施，<code>std::stop_source</code> 和 <code>std::stop_token</code> 都与线程对象关联，然后来管理函数到底如何执行。</p><p>我们并没有举很多的例子，我们觉得这一个小例子所牵扯到的内容也就足够了，关键在于理解其设计与概念。</p><h2 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h2><p>本章节的内容围绕着：“使用线程”，也就是&quot;<strong>使用 <code>std::thread</code></strong>&quot;展开， <code>std::thread</code> 是我们学习 C++ 并发支持库的重中之重，本章的内容在市面上并不少见，但是却是少有的准确与完善。即使你早已学习乃至使用 C++ 标准库进行多线程编程，我相信本章也一定可以让你收获良多。</p><p>如果是第一次学习本章的内容，能会有一些难以理解的地方。建议你多思考、多记忆，并在以后反复查看和实践。</p><p>我尽量以简单通俗的方式进行讲解。学完本章后，你可能还无法在实际环境利用多线程提升程序效率，至少还需要学习到使用互斥量来保护共享数据，才能实际应用多线程编程。</p><hr class="footnotes-sep">`,20),Vt={class:"footnotes"},Nt={class:"footnotes-list"},Ut={id:"footnote1",class:"footnote-item"},Gt={href:"https://zh.cppreference.com/w/cpp/language/overload_resolution",target:"_blank",rel:"noopener noreferrer"},Ot=n("strong",null,"选择最合适的函数重载进行调用",-1),Yt=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),Jt=n("li",{id:"footnote2",class:"footnote-item"},[n("p",null,[s("注：通常需要线程执行的函数中有一些系统调用，设置取消点，线程会在那个调用中结束。 "),n("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎")])],-1),Kt=n("li",{id:"footnote3",class:"footnote-item"},[n("p",null,[s("注：“停止状态”指的是由 std::stop_source 和 std::stop_token 管理的一种标志，用于通知线程应该停止执行。这种机制不是强制性的终止线程，而是提供一种线程内外都能检查和响应的信号。 "),n("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎")])],-1);function Qt(Zt,$t){const t=e("ExternalLinkIcon"),p=e("RouteLink");return u(),i("div",null,[r,n("p",null,[s("在标准 C++ 中，"),n("a",k,[v,a(t)]),s(" 可以指代线程，使用线程也就是使用 "),m,s(" 类。")]),h,n("p",null,[s('这段代码将"Hello World!"写入到标准输出流，换行并'),n("a",b,[s("刷新"),a(t)]),s("。")]),_,n("p",null,[g,s(" 创建了一个线程对象 "),f,s("，将 "),w,s(" 作为它的"),n("a",y,[s("可调用(Callable)"),a(t)]),s("对象，在新线程中执行。线程对象关联了一个线程资源，我们无需手动控制，在线程对象构造成功，就自动在新线程开始执行函数 "),E,s("。")]),n("p",null,[j,s(" 等待线程对象 "),x,s(" 关联的线程执行完毕，否则将一直堵塞。这里的调用是必须的，否则 "),z,s(" 的析构函数将调用 "),n("a",A,[q,a(t)]),s(" 无法正确析构。")]),n("p",null,[s("这是因为我们创建线程对象 "),B,s(" 的时候就关联了一个活跃的线程，调用 "),C,s(" 就是确保线程对象关联的线程已经执行完毕，然后会修改对象的状态，让 "),n("a",T,[F,a(t)]),s(" 返回 "),I,s("，表示线程对象目前没有关联活跃线程。"),S,s(" 的析构函数，正是通过 "),D,s(" 判断线程对象目前是否有关联活跃线程，如果为 "),L,s("，那么就当做有关联活跃线程，会调用 "),W,s("。")]),P,R,H,n("p",null,[s("使用 "),n("a",M,[X,a(t)]),s(" 函数可以获得我们当前硬件支持的并发线程数量，它是 "),V,s(" 的静态成员函数。")]),N,n("p",null,[s("本节其实是要普及一下计算机常识，一些古老的书籍比如 "),n("a",U,[s("csapp"),a(t)]),s(" 应该也会提到“"),n("strong",null,[n("a",G,[s("超线程技术"),a(t)])]),s("”。")]),n("blockquote",null,[n("p",null,[n("a",O,[s("英特尔® 超线程"),a(t)]),s("技术是一项硬件创新，允许在每个内核上运行多个线程。更多的线程意味着可以"),Y,s("完成更多的工作。")]),J]),K,n("blockquote",null,[n("p",null,[n("a",Q,[s("运行"),a(t)]),s("测试。")])]),Z,n("p",null,[s("我们先获取了迭代器所指向的值的类型，定义了一个别名 "),$,s("，我们这里使用到的 "),n("a",nn,[sn,a(t)]),s(" 是 C++20 引入的，"),n("a",an,[s("返回类型推导"),a(t)]),s("是 C++14 引入。如果希望代码可以在 C++11 的环境运行也可以自行修改为：")]),tn,n("blockquote",null,[n("p",null,[n("a",on,[s("运行"),a(t)]),s("测试。")])]),n("p",null,[pn,s(" 是当前硬件支持的并发线程的值。"),n("a",en,[cn,a(t)]),s(" 用来计算 first 到 last 的距离，也就是我们要进行求和的元素个数了。")]),n("p",null,[s("我们这里的设计比较简单，毕竟是初学，所以只对元素个数大于 "),ln,s(" 的进行多线程求和，而小于这个值的则直接使用标准库函数 "),n("a",un,[dn,a(t)]),s(" 求和即可。")]),rn,n("p",null,[s("本节代码只是为了学习，而且只是百万数据通常没必要多线程，上亿的话差不多。如果你需要多线程求和，可以使用 C++17 引入的求和算法 "),n("a",kn,[vn,a(t)]),s(" 并指明"),n("a",mn,[s("执行策略"),a(t)]),s("。它的效率接近我们实现的 "),hn,s(" 的两倍，当前环境核心越多数据越多，和单线程效率差距越明显。")]),bn,n("p",null,[s("我们上一节的示例是传递了一个函数给 "),_n,s(" 对象，函数会在新线程中执行。"),gn,s(" 支持的形式还有很多，只要是"),n("a",fn,[s("可调用(Callable)"),a(t)]),s("对象即可，比如重载了 "),wn,s(" 的类对象（也可以直接叫函数对象）。")]),yn,n("blockquote",null,[n("p",null,[s("在确定每个形参的类型后，类型是 “T 的数组”或某个"),En,s("。"),n("a",jn,[s("文档"),a(t)]),s("。")])]),xn,n("p",null,[s("C++11 引入的 Lambda 表达式，同样可以作为构造 "),zn,s(" 的参数，因为 Lambda 本身就是"),n("a",An,[s("生成"),a(t)]),s("了一个函数对象，它自身就是"),n("a",qn,[s("类类型"),a(t)]),s("。")]),Bn,n("p",null,[s("启动线程后（也就是构造 "),Cn,s(" 对象）我们必须在线程对象的生存期结束之前，即 "),n("a",Tn,[Fn,a(t)]),s(" 调用之前，决定它的执行策略，是 "),n("a",In,[Sn,a(t)]),s("（合并）还是 "),n("a",Dn,[Ln,a(t)]),s("（分离）。")]),Wn,Pn,n("p",null,[s("在单线程的代码中，对象销毁之后再去访问，会产生"),n("a",Rn,[s("未定义行为"),a(t)]),s("，多线程增加了这个问题发生的几率。")]),Hn,n("p",null,[s("至于这个"),Mn,s("，我们只是确保函数 f 中创建的线程正常执行完成，其局部对象正常析构释放。"),n("a",Xn,[s("测试代码"),a(t)]),s("。")]),n("blockquote",null,[Vn,n("p",null,[s("你是否觉得这样也可以？也没问题？简单的"),n("a",Nn,[s("测试"),a(t)]),s("运行的确没问题。")]),Un]),Gn,n("p",null,[s("“"),n("a",On,[s("资源获取即初始化"),a(t)]),s("”(RAII，Resource Acquisition Is Initialization)。")]),Yn,n("p",null,[s("函数 f 执行完毕，局部对象就要逆序销毁了。因此，thread_guard 对象 g 是第一个被销毁的，"),Jn,s("。"),Kn,s("。这确保了线程对象 t 所关联的线程正常的执行完毕以及线程对象的正常析构。"),n("a",Qn,[s("测试代码"),a(t)]),s("。")]),n("blockquote",null,[n("p",null,[s("如果异常被抛出但未被捕获那么就会调用 "),n("a",Zn,[s("std::terminate"),a(t)]),s("。是否对未捕获的异常进行任何栈回溯由"),$n,s("。（简单的说就是不一定会调用析构）")]),ns]),ss,n("p",null,[s("复制赋值和复制构造定义为 "),as,s(" 可以防止编译器隐式生成，同时会"),n("a",ts,[os,a(t)]),s("移动构造函数和移动赋值运算符的隐式定义。这样的话，对 thread_guard 对象进行复制或赋值等操作会引发一个编译错误。")]),ps,n("p",null,[n("a",es,[s("运行代码"),a(t)]),s("，打印的地址截然不同。")]),n("p",null,[s("可以通过编译，但通常这不符合我们的需求，因为我们的函数中的参数是引用，我们自然希望能引用调用方传递的参数，而不是复制。如果我们的 f 的形参类型不是 "),cs,s("，则会产生一个"),n("a",ls,[s("编译错误"),a(t)]),s("。")]),n("p",null,[s("想要解决这个问题很简单，我们可以使用标准库的设施 "),n("a",us,[is,a(t)]),s(" 、 "),ds,s(" 函数模板。")]),rs,n("blockquote",null,[n("p",null,[n("a",ks,[s("运行代码"),a(t)]),s("，打印地址完全相同。")])]),n("p",null,[s("我们来解释一下，“"),vs,s("” 其实就是 “"),ms,s("”（引用）的缩写，意思也很简单，返回“引用”，当然了，不是真的返回引用，它们返回一个包装类 "),n("a",hs,[bs,a(t)]),s("，顾名思义，这个类就是包装引用对象类模板，将对象包装，可以隐式转换为被包装对象的引用。")]),_s,n("blockquote",null,[n("p",null,[s("如果对他们的实现感兴趣，可以观看"),n("a",gs,[s("视频"),a(t)]),s("。")])]),fs,n("p",null,[s("以上代码"),ws,s(" 如果不使用 "),ys,s(" 并不会和前面 "),Es,s(" 一样只是多了复制，而是会产生"),n("a",js,[xs,a(t)]),s("，这是因为 "),zs,s(" 内部会将保有的参数副本转换为"),As,s("，这是为了那些"),qs,s("，左值引用没办法引用右值表达式，所以产生编译错误。")]),Bs,n("blockquote",null,[n("p",null,[n("a",Cs,[s("运行"),a(t)]),s("测试。")])]),Ts,Fs,Is,n("p",null,[n("a",Ss,[Ds,a(t)]),s("也是"),n("a",Ls,[Ws,a(t)]),s("("),Ps,s(")的 ，可以传递给 "),Rs,s(" 作为构造参数，让其关联的线程执行成员函数。")]),Hs,n("p",null,[s("我们还可以使用模板函数 "),n("a",Ms,[Xs,a(t)]),s("与成员指针一起使用")]),Vs,n("p",null,[s("不过需要注意，"),Ns,s(" 也是默认按值"),n("a",Us,[Gs,a(t)]),s("的，即使我们的成员函数形参类型为引用：")]),Os,n("p",null,[s("除非给参数 "),Ys,s(" 加上 "),Js,s("，就是按"),n("a",Ks,[s("引用"),a(t)]),s("传递了：")]),Qs,n("p",null,[s("字符串字面量具有静态"),n("a",Zs,[$s,a(t)]),s("，指向它的指针这当然没问题了，不用担心生存期的问题，但是如果是指向“动态”对象的指针，就要特别注意了：")]),na,n("p",null,[s("以上代码可能导致一些问题，buffer 是一个数组对象，作为 "),sa,s(" 构造参数的传递的时候会"),n("a",aa,[ta,a(t)]),s(" （确保实参在按值传递时会退化） "),oa,s("。")]),pa,n("p",null,[ea,s(" 的构造函数中调用了创建线程的函数（windows 下可能为 "),n("a",ca,[la,a(t)]),s("），它将我们传入的参数，f、buffer ，传递给这个函数，在新线程中执行函数 "),ua,s("。也就是说，调用和执行 "),ia,s(" 并不是说要在 "),da,s(" 的构造函数中，而是在创建的新线程中，具体什么时候执行，取决于操作系统的调度，所以完全有可能函数 "),ra,s(" 先执行完，而新线程此时还没有进行 "),ka,s(" 的调用，转换为"),va,s("，那么 buffer 指针就"),ma,s("了，会导致问题。解决方案：")]),ha,n("ol",null,[n("li",null,[n("a",ba,[_a,a(t)]),s(" 建议实现重新调度各执行线程。")]),n("li",null,[n("a",ga,[fa,a(t)]),s(" 返回当前线程 id。")]),n("li",null,[n("a",wa,[ya,a(t)]),s(" 使当前线程停止执行指定时间。")]),n("li",null,[n("a",Ea,[ja,a(t)]),s(" 使当前线程执行"),xa,s("指定的时间点。")])]),za,n("ul",null,[n("li",null,[n("p",null,[s("使用 "),Aa,s(),n("a",qa,[s("打印"),a(t)]),s("主线程和子线程的 ID。")]),Ba]),n("li",null,[Ca,n("p",null,[s("主线程延时 3 秒，这个传入了一个临时对象 "),Ta,s(" ，它是模板 "),n("a",Fa,[Ia,a(t)]),s(" 的别名，以及还有很多其他的时间类型，都基于这个类。说实话挺麻烦的，如果您支持 C++14，建议使用"),n("a",Sa,[s("时间字面量"),a(t)]),s("，在 "),n("a",Da,[La,a(t)]),s(" 命名空间中。我们可以改成下面这样：")]),Wa]),Pa,n("li",null,[Ra,n("p",null,[Ha,s(" 本身设置使用很简单，是打印时间格式、设置时区麻烦。"),n("a",Ma,[s("运行结果"),a(t)]),s("。")])])]),Xa,n("p",null,[s("这段代码可以"),n("a",Va,[s("通过编译"),a(t)]),s("，你是否感到奇怪？我们在函数 f 中创建了一个局部的 "),Na,s(" 对象，启动线程，然后返回它。")]),Ua,n("h2",Ga,[n("a",Oa,[n("span",null,[a(p,{to:"/md/%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/01thread%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"},{default:c(()=>[Ya,s(" 的构造-源码解析")]),_:1})])])]),Ja,Ka,n("ul",null,[Qa,Za,$a,n("li",null,[s("如何做到接受任意"),n("a",nt,[s("可调用"),a(t)]),s("对象？")]),st,at]),n("p",null,[s("当你看完 "),a(p,{to:"/md/%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/01thread%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"},{default:c(()=>[tt]),_:1}),s(" 后，可以再回过头来问问自己是否能够回答这些问题。")]),ot,n("p",null,[s("简单"),n("a",pt,[s("使用"),a(t)]),s("一下：")]),et,n("blockquote",null,[n("p",null,[n("a",ct,[s("运行测试"),a(t)]),s("。")])]),lt,n("blockquote",null,[n("p",null,[n("a",ut,[s("运行测试"),a(t)]),s("。")])]),it,n("p",null,[dt,s(" 的通常实现就是单纯的保有 "),rt,s(" + "),n("a",kt,[vt,a(t)]),s(" 这两个数据成员：")]),mt,n("p",null,[n("a",ht,[s("MSVC STL"),a(t)]),s("、"),n("a",bt,[s("libstdc++"),a(t)]),s("、"),n("a",_t,[s("libc++"),a(t)]),s(" 均是如此。")]),gt,n("p",null,[s("首先要明确，C++ 的 "),ft,s(" 提供的线程停止功能并不同于常见的 POSIX 函数 "),n("a",wt,[yt,a(t)]),s("。"),Et,s(" 是一种发送取消请求的函数，但并不是强制性的线程终止方式。目标线程的可取消性状态和类型决定了取消何时生效。当取消被执行时，进行清理和终止线程"),jt,s("。")]),n("p",null,[xt,s(" 所谓的线程停止只是一种"),zt,s("，而不是一种与操作系统系统有关系的线程终止。使用 "),At,s(" 和 "),n("a",qt,[Bt,a(t)]),s(" 提供了一种优雅地请求线程停止的方式，"),Ct,s("。")]),Tt,n("blockquote",null,[n("p",null,[n("a",Ft,[s("运行"),a(t)]),s("测试。截止目前（"),It,s(" clang19 未发布） "),St,s(" 不完全支持 "),Dt,s("，建议使用 "),Lt,s(" 的开发者链接 "),Wt,s(" 或 "),Pt,s(" 进行编译。如果非要使用 "),Rt,s("，可以添加 "),n("a",Ht,[Mt,a(t)]),s(" 编译选项，启用不稳定库功能和实验库功能。这样，我们的这段代码就可以通过编译。")])]),Xt,n("section",Vt,[n("ol",Nt,[n("li",Ut,[n("p",null,[n("a",Gt,[s("重载决议"),a(t)]),s("简单来说就是编译器必须要根据规则"),Ot,s("。 "),Yt])]),Jt,Kt])])])}const ao=l(d,[["render",Qt],["__file","02使用线程.html.vue"]]),to=JSON.parse('{"path":"/md/02%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B.html","title":"使用线程","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Hello World","slug":"hello-world","link":"#hello-world","children":[]},{"level":2,"title":"当前环境支持并发线程数","slug":"当前环境支持并发线程数","link":"#当前环境支持并发线程数","children":[]},{"level":2,"title":"线程管理","slug":"线程管理","link":"#线程管理","children":[{"level":3,"title":"启动新线程","slug":"启动新线程","link":"#启动新线程","children":[]},{"level":3,"title":"RAII","slug":"raii","link":"#raii","children":[]},{"level":3,"title":"传递参数","slug":"传递参数","link":"#传递参数","children":[]},{"level":3,"title":"std::this_thread","slug":"std-this-thread","link":"#std-this-thread","children":[]},{"level":3,"title":"std::thread 转移所有权","slug":"std-thread-转移所有权","link":"#std-thread-转移所有权","children":[]}]},{"level":2,"title":"std::thread 的构造-源码解析","slug":"std-thread-的构造-源码解析","link":"#std-thread-的构造-源码解析","children":[]},{"level":2,"title":"实现 joining_thread","slug":"实现-joining-thread","link":"#实现-joining-thread","children":[]},{"level":2,"title":"C++20 std::jthread","slug":"c-20-std-jthread","link":"#c-20-std-jthread","children":[{"level":3,"title":"零开销原则","slug":"零开销原则","link":"#零开销原则","children":[]},{"level":3,"title":"线程停止","slug":"线程停止","link":"#线程停止","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}],"git":{"createdTime":1709646719000,"updatedTime":1717214224000,"contributors":[{"name":"归故里","email":"3326284481@qq.com","commits":10},{"name":"mq白","email":"3326284481@qq.com","commits":7},{"name":"A. Jiang","email":"de34@live.cn","commits":2}]},"readingTime":{"minutes":35.83,"words":10748},"filePathRelative":"md/02使用线程.md","localizedDate":"2024年3月5日","excerpt":"\\n<p>在标准 C++ 中，<a href=\\"https://zh.cppreference.com/w/cpp/thread/thread\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>std::thread</code></a> 可以指代线程，使用线程也就是使用 <code>std::thread</code> 类。</p>\\n<h2>Hello World</h2>\\n<p>在我们初学 C++ 的时候应该都写过这样一段代码：</p>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Hello World!\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{ao as comp,to as data};
