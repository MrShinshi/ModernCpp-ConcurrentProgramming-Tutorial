import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as u,a as n,b as s,d as a,w as i,e as p}from"./app-BGUIea1J.js";const k={},d=n("h1",{id:"std-scoped-lock-的源码实现与解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#std-scoped-lock-的源码实现与解析"},[n("span",null,[n("code",null,"std::scoped_lock"),s(" 的源码实现与解析")])])],-1),r=n("p",null,[s("本单章专门介绍标准库在 C++17 引入的类模板 "),n("code",null,"std::scoped_lock"),s(" 的实现，让你对它再无疑问。")],-1),m=n("code",null,"std::thread",-1),_=n("strong",null,"不会模板，你阅读标准库源码，是无稽之谈",-1),v={href:"https://mq-b.github.io/Modern-Cpp-templates-tutorial/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/microsoft/STL/blob/8e2d724cc1072b4052b14d8c5f81a830b8f1d8cb/stl/inc/mutex#L476-L528",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"std::scoped_lock",-1),g={href:"https://github.com/gcc-mirror/gcc/blob/7a01cc711f33530436712a5bfd18f8457a68ea1f/libstdc%2B%2B-v3/include/std/mutex#L743-L802",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"libstdc++",-1),x={href:"https://github.com/llvm/llvm-project/blob/7ac7d418ac2b16fd44789dcf48e2b5d73de3e715/libcxx/include/mutex#L424-L488",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"libc++",-1),w=p(`<h2 id="std-scoped-lock-的数据成员" tabindex="-1"><a class="header-anchor" href="#std-scoped-lock-的数据成员"><span><code>std::scoped_lock</code> 的数据成员</span></a></h2><p><code>std::scoped_lock</code> 是一个类模板，它有两个特化，也就是有三个版本，其中的数据成员也是不同的。并且它们都不可移动不可复制，“<em>管理类</em>”应该如此。</p><ol><li><p>主模板，是一个可变参数类模板，声明了一个类型形参包 <code>_Mutexes</code>，<strong>存储了一个 <code>std::tuple</code></strong>，具体类型根据类型形参包决定。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>_EXPORT_STD <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Mutexes<span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">_NODISCARD_LOCK</span> scoped_lock <span class="token punctuation">{</span> <span class="token comment">// class with destructor that unlocks mutexes</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">scoped_lock</span><span class="token punctuation">(</span>_Mutexes<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Mtxes<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_MyMutexes</span><span class="token punctuation">(</span>_Mtxes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// construct and lock</span>
        _STD <span class="token function">lock</span><span class="token punctuation">(</span>_Mtxes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">explicit</span> <span class="token function">scoped_lock</span><span class="token punctuation">(</span>adopt_lock_t<span class="token punctuation">,</span> _Mutexes<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Mtxes<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token comment">// strengthened</span>
        <span class="token operator">:</span> <span class="token function">_MyMutexes</span><span class="token punctuation">(</span>_Mtxes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// construct but don&#39;t lock</span>

    <span class="token operator">~</span><span class="token function">scoped_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
        _STD <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_Mutexes<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Mtxes<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> _Mtxes<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> _MyMutexes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">scoped_lock</span><span class="token punctuation">(</span><span class="token keyword">const</span> scoped_lock<span class="token operator">&amp;</span><span class="token punctuation">)</span>            <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
    scoped_lock<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> scoped_lock<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    tuple<span class="token operator">&lt;</span>_Mutexes<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span> _MyMutexes<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对模板类型形参包只有一个类型情况的<strong>偏特化</strong>，是不是很熟悉，和 <code>lock_guard</code> 几乎没有任何区别，<strong>保有一个互斥量的引用</strong>，构造上锁，析构解锁，提供一个额外的构造函数让构造的时候不上锁。所以用 <code>scoped_lock</code> 替代 <code>lock_guard</code> 不会造成任何额外开销。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Mutex</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">_NODISCARD_LOCK</span> scoped_lock<span class="token operator">&lt;</span>_Mutex<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">using</span> mutex_type <span class="token operator">=</span> _Mutex<span class="token punctuation">;</span>

    <span class="token keyword">explicit</span> <span class="token function">scoped_lock</span><span class="token punctuation">(</span>_Mutex<span class="token operator">&amp;</span> _Mtx<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_MyMutex</span><span class="token punctuation">(</span>_Mtx<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// construct and lock</span>
        _MyMutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">explicit</span> <span class="token function">scoped_lock</span><span class="token punctuation">(</span>adopt_lock_t<span class="token punctuation">,</span> _Mutex<span class="token operator">&amp;</span> _Mtx<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token comment">// strengthened</span>
        <span class="token operator">:</span> <span class="token function">_MyMutex</span><span class="token punctuation">(</span>_Mtx<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// construct but don&#39;t lock</span>

    <span class="token operator">~</span><span class="token function">scoped_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
        _MyMutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">scoped_lock</span><span class="token punctuation">(</span><span class="token keyword">const</span> scoped_lock<span class="token operator">&amp;</span><span class="token punctuation">)</span>            <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
    scoped_lock<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> scoped_lock<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    _Mutex<span class="token operator">&amp;</span> _MyMutex<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对类型形参包为空的情况的全特化，<strong>没有数据成员</strong>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">scoped_lock</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">scoped_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token keyword">explicit</span> <span class="token function">scoped_lock</span><span class="token punctuation">(</span>adopt_lock_t<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token comment">/* strengthened */</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">scoped_lock</span><span class="token punctuation">(</span><span class="token keyword">const</span> scoped_lock<span class="token operator">&amp;</span><span class="token punctuation">)</span>            <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
    scoped_lock<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> scoped_lock<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>mutex m1<span class="token punctuation">,</span>m2<span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>scoped_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span>lc<span class="token punctuation">{</span> m1 <span class="token punctuation">}</span><span class="token punctuation">;</span>                   <span class="token comment">// 匹配到偏特化版本  保有一个 std::mutex&amp;</span>
std<span class="token double-colon punctuation">::</span>scoped_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span>lc2<span class="token punctuation">{</span> m1<span class="token punctuation">,</span>m2 <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// 匹配到主模板     保有一个 std::tuple&lt;std::mutex&amp;,std::mutex&amp;&gt;</span>
std<span class="token double-colon punctuation">::</span>scoped_lock<span class="token operator">&lt;</span><span class="token operator">&gt;</span> lc3<span class="token punctuation">;</span>                                 <span class="token comment">// 匹配到全特化版本  空</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="std-scoped-lock的构造与析构" tabindex="-1"><a class="header-anchor" href="#std-scoped-lock的构造与析构"><span><code>std::scoped_lock</code>的构造与析构</span></a></h2><p>在上一节讲 <code>scoped_lock</code> 的数据成员的时候已经把这个模板类的全部源码，三个版本的代码都展示了，就不再重复。</p><p>这三个版本中，<strong>只有两个版本需要介绍</strong>，也就是</p><ol><li>形参包元素数量为一的偏特化，只管理一个互斥量的。</li><li>主模板，可以管理任意个数的互斥量。</li></ol><p>那这两个的共同点是什么呢？<em><strong>构造上锁，析构解锁</strong></em>。这很明显，明确这一点我们就开始讲吧。</p><hr><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>mutex m<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    m<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> lc<span class="token punctuation">{</span> m<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>adopt_lock <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    m<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>scoped_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span>sp<span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>adopt_lock<span class="token punctuation">,</span>m <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码为你展示了 <code>std::lock_guard</code> 和 <code>std::scoped_lock</code> 形参包元素数量为一的偏特化的唯一区别：<strong>调用不会上锁的构造函数的参数顺序不同</strong>。那么到此也就够了。</p><p>接下来我们进入 <code>std::scoped_lock</code> 主模板的讲解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">explicit</span> <span class="token function">scoped_lock</span><span class="token punctuation">(</span>_Mutexes<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Mtxes<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_MyMutexes</span><span class="token punctuation">(</span>_Mtxes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// construct and lock</span>
        _STD <span class="token function">lock</span><span class="token punctuation">(</span>_Mtxes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),M=n("code",null,"_MyMutexes",-1),E={href:"https://zh.cppreference.com/w/cpp/thread/lock",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"std::lock",-1),C=p(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">explicit</span> <span class="token function">scoped_lock</span><span class="token punctuation">(</span>adopt_lock_t<span class="token punctuation">,</span> _Mutexes<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Mtxes<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token comment">// strengthened</span>
    <span class="token operator">:</span> <span class="token function">_MyMutexes</span><span class="token punctuation">(</span>_Mtxes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// construct but don&#39;t lock</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个构造函数不上锁，只是初始化数据成员 <code>_MyMutexes</code>让它保有这些互斥量的引用。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token operator">~</span><span class="token function">scoped_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
    _STD <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_Mutexes<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Mtxes<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> _Mtxes<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> _MyMutexes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),B={href:"https://zh.cppreference.com/w/cpp/utility/apply",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"std::apply",-1),L={href:"https://zh.cppreference.com/w/cpp/utility/tuple",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"std::tuple",-1),S=n("code",null,"std::apply",-1),z=n("code",null,"unlock()",-1),D=n("code",null,"(void)",-1),N={href:"https://zh.cppreference.com/w/cpp/language/expressions#.E5.BC.83.E5.80.BC.E8.A1.A8.E8.BE.BE.E5.BC.8F",target:"_blank",rel:"noopener noreferrer"},V=n("em",null,"弃值表达式",-1),j=n("code",null,"std::thread",-1),F={href:"https://github.com/microsoft/STL/blob/8e2d724cc1072b4052b14d8c5f81a830b8f1d8cb/stl/inc/thread#L82",target:"_blank",rel:"noopener noreferrer"},O={href:"https://zh.cppreference.com/w/cpp/thread#.E4.BA.92.E6.96.A5",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"unlock()",-1),I=n("code",null,"void",-1),K={href:"https://github.com/gcc-mirror/gcc/blob/7a01cc711f33530436712a5bfd18f8457a68ea1f/libstdc%2B%2B-v3/include/std/mutex#L757-L758",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/llvm/llvm-project/blob/7ac7d418ac2b16fd44789dcf48e2b5d73de3e715/libcxx/include/mutex#L472-L475",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"unlock()",-1),X=n("code",null,"void",-1),Q={href:"https://zh.cppreference.com/w/cpp/named_req/Mutex",target:"_blank",rel:"noopener noreferrer"},Z=n("em",null,"互斥体",-1),G=n("em",null,"(Mutex)",-1),H=n("code",null,"unlock()",-1),U=p(`<hr><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Tuple</span> <span class="token operator">&gt;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> <span class="token function">apply</span><span class="token punctuation">(</span> F<span class="token operator">&amp;&amp;</span> f<span class="token punctuation">,</span> Tuple<span class="token operator">&amp;&amp;</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),W={href:"https://zh.cppreference.com/w/cpp/named_req/Callable",target:"_blank",rel:"noopener noreferrer"},Y=n("em",null,"可调用",-1),$=n("em",null,"(Callable)",-1),nn=n("code",null,"std::thread",-1),sn=p(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Callable</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Tuple</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>index<span class="token operator">&gt;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> <span class="token function">Apply_impl</span><span class="token punctuation">(</span>Callable<span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">,</span>Tuple<span class="token operator">&amp;&amp;</span> tuple<span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span>index_sequence<span class="token operator">&lt;</span>index<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">invoke</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>Callable<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>index<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>Tuple<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>tuple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Callable</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Tuple</span><span class="token operator">&gt;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> <span class="token function">apply</span><span class="token punctuation">(</span>Callable<span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">,</span> Tuple<span class="token operator">&amp;&amp;</span> tuple<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Apply_impl</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>Callable<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>Tuple<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>tuple<span class="token punctuation">)</span><span class="token punctuation">,</span>
        std<span class="token double-colon punctuation">::</span>make_index_sequence<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>tuple_size_v<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>remove_reference_t<span class="token operator">&lt;</span>Tuple<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就是把元组给解包了，利用了 <code>std::index_sequence</code> + <code>std::make_index_sequence</code> 然后就用 <code>std::get</code> 形参包展开用 <code>std::invoke</code> 调用可调用对象即可，<strong>非常经典的处理可变参数做法</strong>，这个非常重要，一定要会使用。</p><p>举一个简单的调用例子：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">&gt;</span> tuple<span class="token punctuation">{</span> <span class="token number">66</span><span class="token punctuation">,</span><span class="token string">&quot;😅&quot;</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token double-colon punctuation">::</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> tuple<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),an={href:"https://godbolt.org/z/n4aKo4xbr",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://zh.cppreference.com/w/cpp/language/fold",target:"_blank",rel:"noopener noreferrer"},pn=p('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><strong>如你所见，其实这很简单</strong>。至少使用与了解其设计原理是很简单的。唯一的难度或许只有那点源码，处理可变参数，这会涉及不少模板技术，既常见也通用。还是那句话：“<em><strong>不会模板，你阅读标准库源码，是无稽之谈</strong></em>”。</p><p>相对于 <code>std::thread</code> 的源码解析，<code>std::scoped_lock</code> 还是简单的多。</p>',3);function on(en,cn){const e=o("RouteLink"),t=o("ExternalLinkIcon");return l(),u("div",null,[d,r,n("p",null,[s("这会涉及到不少的模板技术，这没办法，就如同我们先前聊 "),a(e,{to:"/md/%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/01thread%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"},{default:i(()=>[m,s(" 的构造与源码分析")]),_:1}),s("最后说的：“"),_,s("”。建议学习"),n("a",v,[s("现代C++模板教程"),a(t)]),s("。")]),n("p",null,[s("我们还是一样的，以 MSVC STL 实现的 "),n("a",b,[h,a(t)]),s(" 代码进行讲解，不用担心，我们也查看了 "),n("a",g,[f,a(t)]),s(" 、"),n("a",x,[y,a(t)]),s("的实现，并没有太多区别，更多的是一些风格上的。而且个人觉得 MSVC 的实现是最简单直观的。")]),w,n("p",null,[s("这个构造函数做了两件事情，初始化数据成员 "),M,s("让它保有这些互斥量的引用，以及给所有互斥量上锁，使用了 "),n("a",E,[A,a(t)]),s(" 帮助我们完成这件事情。")]),C,n("p",null,[s("析构函数就要稍微聊一下了，主要是用 "),n("a",B,[T,a(t)]),s(" 去遍历 "),n("a",L,[q,a(t)]),s(" ，让元组保有的互斥量引用都进行解锁。简单来说是 "),S,s(" 可以将元组存储的参数全部拿出，用于调用这个可变参数的可调用对象，我们就能利用折叠表达式展开形参包并对其调用 "),z,s("。")]),n("blockquote",null,[n("p",null,[s("不在乎其返回类型只用来实施它的副作用，显式转换为 "),D,s(" 也就是"),n("a",N,[V,a(t)]),s("。在我们之前讲的 "),j,s(" 源码中也有这种"),n("a",F,[s("用法"),a(t)]),s("。")]),n("p",null,[s("不过你可能有疑问：“我们的标准库的那些"),n("a",O,[s("互斥量"),a(t)]),s(),R,s(" 返回类型都是 "),I,s(" 呀，为什么要这样？”")]),n("p",null,[s("的确，这是个好问题，"),n("a",K,[s("libstdc++"),a(t)]),s(" 和 "),n("a",P,[s("libc++"),a(t)]),s(" 都没这样做，或许 MSVC STL 想着会有人设计的互斥量让它的 "),J,s(" 返回类型不为 "),X,s("，毕竟 "),n("a",Q,[Z,s(),G,a(t)]),s(" 没有要求 "),H,s(" 的返回类型。")])]),U,n("p",null,[s("这个函数模板接受两个参数，一个"),n("a",W,[Y,s(),$,a(t)]),s("对象 f，以及一个元组 t，用做调用 f 。我们可以自己简单实现一下它，其实不算难，这种遍历元组的方式在之前讲 "),nn,s(" 的源码的时候也提到过。")]),sn,n("blockquote",null,[n("p",null,[n("a",an,[s("运行测试"),a(t)]),s("。")])]),n("p",null,[s("使用了"),n("a",tn,[s("折叠表达式"),a(t)]),s("展开形参包，打印了元组所有的元素。")]),pn])}const kn=c(k,[["render",on],["__file","02scoped_lock源码解析.html.vue"]]),dn=JSON.parse('{"path":"/md/%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/02scoped_lock%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","title":"std::scoped_lock 的源码实现与解析","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"std::scoped_lock 的数据成员","slug":"std-scoped-lock-的数据成员","link":"#std-scoped-lock-的数据成员","children":[]},{"level":2,"title":"std::scoped_lock的构造与析构","slug":"std-scoped-lock的构造与析构","link":"#std-scoped-lock的构造与析构","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1711004504000,"updatedTime":1716814130000,"contributors":[{"name":"归故里","email":"3326284481@qq.com","commits":7},{"name":"A. Jiang","email":"de34@live.cn","commits":1},{"name":"LeeZQXML","email":"2919625053@qq.com","commits":1},{"name":"mq白","email":"3326284481@qq.com","commits":1}]},"readingTime":{"minutes":5.6,"words":1681},"filePathRelative":"md/详细分析/02scoped_lock源码解析.md","localizedDate":"2024年3月21日","excerpt":"\\n<p>本单章专门介绍标准库在 C++17 引入的类模板 <code>std::scoped_lock</code> 的实现，让你对它再无疑问。</p>\\n<p>这会涉及到不少的模板技术，这没办法，就如同我们先前聊 <a href=\\"/ModernCpp-ConcurrentProgramming-Tutorial/md/%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/01thread%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html\\" target=\\"_blank\\"><code>std::thread</code> 的构造与源码分析</a>最后说的：“<strong>不会模板，你阅读标准库源码，是无稽之谈</strong>”。建议学习<a href=\\"https://mq-b.github.io/Modern-Cpp-templates-tutorial/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">现代C++模板教程</a>。</p>"}');export{kn as comp,dn as data};
