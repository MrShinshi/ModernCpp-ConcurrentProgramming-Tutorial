import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as l,a as n,b as s,d as e,e as o}from"./app-BGUIea1J.js";const i={},r=o(`<h1 id="内存模型与原子操作" tabindex="-1"><a class="header-anchor" href="#内存模型与原子操作"><span>内存模型与原子操作</span></a></h1><ul><li><p>内存模型定义了多线程程序中，读写操作如何在不同线程之间可见，以及这些操作在何种顺序下执行。内存模型确保程序的行为在并发环境下是可预测的。</p></li><li><p>原子操作即<strong>不可分割的操作</strong>。系统的所有线程，不可能观察到原子操作完成了一半。</p></li></ul><p>最基础的概念就是如此，这里不再过多赘述，后续还会详细展开内存模型的问题。</p><h2 id="原子操作" tabindex="-1"><a class="header-anchor" href="#原子操作"><span>原子操作</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">++</span>a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，<code>++a</code> 是非原子操作，也就是说在多线程中可能会被另一个线程观察到只完成一半。</p><ol><li>线程 A 和线程 B 同时开始修改变量 <code>a</code> 的值。</li><li>线程 A 对 <code>a</code> 执行递增操作，但还未完成。</li><li>在线程 A 完成递增操作之前，线程 B 也执行了递增操作。</li><li>线程 C 读取 <code>a</code> 的值。</li></ol>`,7),d={href:"https://zh.cppreference.com/w/cpp/language/ub",target:"_blank",rel:"noopener noreferrer"},u=o(`<p>在之前的内容中，我们讲述了使用很多同步设施，如互斥量，来保护共享资源。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>mutex m<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> lc<span class="token punctuation">{</span> m <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token operator">++</span>a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过互斥量的保护，即使 <code>++a</code> 本身不是原子操作，<strong>逻辑上也可视为原子操作</strong>。互斥量确保了对共享资源的读写是线程安全的，避免了数据竞争问题。</p>`,3),k=n("strong",null,"原子类型",-1),m=n("strong",null,"原子",-1),_={href:"https://zh.cppreference.com/w/cpp/atomic/atomic",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"std::atomic",-1),b=n("h3",{id:"原子类型-std-atomic",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原子类型-std-atomic"},[n("span",null,[s("原子类型 "),n("code",null,"std::atomic")])])],-1),g={href:"https://zh.cppreference.com/w/cpp/header/atomic",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"<atomic>",-1),f=n("em",null,[s("它们几乎都有一个 "),n("code",null,"is_lock_free()"),s(" 成员函数，这个函数可以让用户查询某原子类型的操作是直接用的原子指令（返回 "),n("code",null,"true"),s("），还是内部用了锁实现（返回 "),n("code",null,"false"),s("）。")],-1),y=n("p",null,"原子操作可以代替互斥量，来进行同步操作，也能带来更高的性能。但是如果它的内部使用互斥量实现，那么不可能有性能的提升。",-1),w=n("code",null,"static constexpr",-1),x={href:"https://zh.cppreference.com/w/cpp/atomic/atomic/is_always_lock_free",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"is_always_lock_free",-1),C=n("code",null,"X::is_always_lock_free",-1),T=n("code",null,"true",-1),E=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>is_always_lock_free <span class="token comment">// true 或 false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),O={href:"https://zh.cppreference.com/w/cpp/atomic/atomic_is_lock_free",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"ATOMIC_xxx_LOCK_FREE",-1),I=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// (C++11 起)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ATOMIC_BOOL_LOCK_FREE</span>     <span class="token comment">/* 未指定 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ATOMIC_CHAR_LOCK_FREE</span>     <span class="token comment">/* 未指定 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ATOMIC_CHAR16_T_LOCK_FREE</span> <span class="token comment">/* 未指定 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ATOMIC_CHAR32_T_LOCK_FREE</span> <span class="token comment">/* 未指定 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ATOMIC_WCHAR_T_LOCK_FREE</span>  <span class="token comment">/* 未指定 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ATOMIC_SHORT_LOCK_FREE</span>    <span class="token comment">/* 未指定 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ATOMIC_INT_LOCK_FREE</span>      <span class="token comment">/* 未指定 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ATOMIC_LONG_LOCK_FREE</span>     <span class="token comment">/* 未指定 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ATOMIC_LLONG_LOCK_FREE</span>    <span class="token comment">/* 未指定 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ATOMIC_POINTER_LOCK_FREE</span>  <span class="token comment">/* 未指定 */</span></span>
<span class="token comment">// (C++20 起)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ATOMIC_CHAR8_T_LOCK_FREE</span>  <span class="token comment">/* 未指定 */</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于一定<strong>有锁</strong>的内建原子类型是 0；</li><li>对于<strong>有时无锁</strong>的内建原子类型是 1；</li><li>对于一定<strong>无锁</strong>的内建原子类型是 2。</li></ul><p>我们可以使用这些宏来对代码进行编译时的优化和检查，以确保在特定平台上原子操作的性能。例如，如果我们知道某些操作在目标平台上是无锁的，那么我们可以利用这一点进行性能优化。如果这些操作在目标平台上是有锁的，我们可能会选择其它同步机制。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 检查 std::atomic&lt;int&gt; 是否总是无锁</span>
<span class="token keyword">if</span> <span class="token keyword">constexpr</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>is_always_lock_free<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;当前环境 std::atomic&lt;int&gt; 始终是无锁&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;当前环境 std::atomic&lt;int&gt; 并不总是无锁&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用 ATOMIC_INT_LOCK_FREE 宏进行编译时检查</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">ATOMIC_INT_LOCK_FREE <span class="token operator">==</span> <span class="token number">2</span></span></span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;int 类型的原子操作一定无锁的。&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">ATOMIC_INT_LOCK_FREE <span class="token operator">==</span> <span class="token number">1</span></span></span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;int 类型的原子操作有时是无锁的。&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;int 类型的原子操作一定有锁的。&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),L={href:"https://godbolt.org/z/q5x7Wfd5r",target:"_blank",rel:"noopener noreferrer"},z=o("<p>如你所见，我们写了一个简单的示例，展示了如何使用 C++17 的静态数据成员 <code>is_always_lock_free</code> 和预处理宏来让程序执行不同的代码。</p><p>因为 <code>is_always_lock_free</code> 是编译期常量，所以我们可以使用 C++17 引入的 <code>constexpr if</code> ，它可以在编译阶段进行决策，避免了运行时的判断开销，提高了性能。</p><p>宏则更是简单了，最基本的预处理器判断，在预处理阶段就选择执行合适的代码。</p><p>在实际应用中，如果一个类型的原子操作总是无锁的，我们可以更放心地在性能关键的代码路径中使用它。例如，在高频交易系统、实时系统或者其它需要高并发性能的场景中，无锁的原子操作可以显著减少锁的开销和争用，提高系统的吞吐量和响应时间。</p><p>另一方面，如果发现某些原子类型在目标平台上是有锁的，我们可以考虑以下优化策略：</p><ol><li><strong>使用不同的数据结构</strong>：有时可以通过改变数据结构来避免对原子操作的依赖。</li><li><strong>减少原子操作的频率</strong>：通过批处理等技术，减少对原子操作的调用次数。</li><li><strong>使用更高效的同步机制</strong>：在一些情况下，其它同步机制（如读写锁）可能比原子操作更高效。</li></ol><hr>",7),M=n("code",null,"std::atomic",-1),R={href:"https://github.com/microsoft/STL/blob/daeb0a6/stl/inc/atomic#L2745-L2805",target:"_blank",rel:"noopener noreferrer"},F=o(`<p>对于标准内建类型的别名，就是在原子类型的类型名前面加上 <code>atomic_</code> 的前缀：<code>atomic_T</code>。不过 <code>signed</code> 缩写 <code>s</code>、<code>unsigned</code> 缩写 <code>u</code>、<code>long long</code> 缩写 <code>llong</code>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">using</span> atomic_char   <span class="token operator">=</span> atomic<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> atomic_schar  <span class="token operator">=</span> atomic<span class="token operator">&lt;</span><span class="token keyword">signed</span> <span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> atomic_uchar  <span class="token operator">=</span> atomic<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> atomic_short  <span class="token operator">=</span> atomic<span class="token operator">&lt;</span><span class="token keyword">short</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> atomic_ushort <span class="token operator">=</span> atomic<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> atomic_int    <span class="token operator">=</span> atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> atomic_uint   <span class="token operator">=</span> atomic<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> atomic_long   <span class="token operator">=</span> atomic<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> atomic_ulong  <span class="token operator">=</span> atomic<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> atomic_llong  <span class="token operator">=</span> atomic<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> atomic_ullong <span class="token operator">=</span> atomic<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),N=n("code",null,"std::atomic",-1),B={href:"https://zh.cppreference.com/w/cpp/atomic/atomic/atomic",target:"_blank",rel:"noopener noreferrer"},K={href:"https://zh.cppreference.com/w/cpp/atomic/atomic/operator%3D",target:"_blank",rel:"noopener noreferrer"},P={href:"https://zh.cppreference.com/w/cpp/language/function#.E5.BC.83.E7.BD.AE.E5.87.BD.E6.95.B0",target:"_blank",rel:"noopener noreferrer"},S=n("strong",null,"隐式转换",-1),D={href:"https://zh.cppreference.com/w/cpp/atomic/atomic/operator_T",target:"_blank",rel:"noopener noreferrer"},G=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">atomic</span><span class="token punctuation">(</span><span class="token keyword">const</span> atomic<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
atomic<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> atomic<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
<span class="token keyword">operator</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),U=n("code",null,"load()",-1),V=n("code",null,"store()",-1),H=n("code",null,"exchange()",-1),Y=n("code",null,"compare_exchange_weak()",-1),j=n("code",null,"compare_exchange_strong()",-1),W=n("code",null,"std::atomic",-1),X={href:"https://zh.cppreference.com/w/cpp/atomic/atomic#.E7.89.B9.E5.8C.96.E6.88.90.E5.91.98.E5.87.BD.E6.95.B0",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"++",-1),Q=n("code",null,"--",-1),Z=n("code",null,"+=",-1),$=n("code",null,"-=",-1),nn=n("code",null,"&=",-1),sn=n("code",null,"|=",-1),an=n("code",null,"^=",-1),en=n("code",null,"fetch_add",-1),on=n("code",null,"fetch_sub",-1),tn=n("p",null,[n("code",null,"std::atomic"),s(" 类模板不仅只能使用标准库为我们定义的特化类型，我们也完全可以自定义类型创建对应的原子对象。不过因为是通用模板，操作仅限 "),n("code",null,"load()"),s("、"),n("code",null,"store()"),s("、"),n("code",null,"exchange()"),s("、"),n("code",null,"compare_exchange_weak()"),s(" 、 "),n("code",null,"compare_exchange_strong()"),s("，以及一个转换函数。")],-1),pn=n("code",null,"std::atomic",-1),cn={href:"https://zh.cppreference.com/w/cpp/named_req/CopyConstructible",target:"_blank",rel:"noopener noreferrer"},ln=n("em",null,"可复制构造 (CopyConstructible)",-1),rn={href:"https://zh.cppreference.com/w/cpp/named_req/CopyAssignable",target:"_blank",rel:"noopener noreferrer"},dn=n("em",null,"可复制赋值 (CopyAssignable)",-1),un={href:"https://zh.cppreference.com/w/cpp/named_req/TriviallyCopyable",target:"_blank",rel:"noopener noreferrer"},kn=n("em",null,"可平凡复制 (TriviallyCopyable)",-1),mn=n("code",null,"T",-1),_n=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">trivial_type</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> y<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">trivial_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">trivial_type</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> x<span class="token punctuation">{</span> a <span class="token punctuation">}</span><span class="token punctuation">,</span> y<span class="token punctuation">{</span> b <span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">trivial_type</span><span class="token punctuation">(</span><span class="token keyword">const</span> trivial_type<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

    trivial_type<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> trivial_type<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

    <span class="token operator">~</span><span class="token function">trivial_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),vn=n("code",null,"std::atomic",-1),bn={href:"https://zh.cppreference.com/w/cpp/language/static_assert",target:"_blank",rel:"noopener noreferrer"},gn=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_trivially_copyable<span class="token operator">&lt;</span>trivial_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_copy_constructible<span class="token operator">&lt;</span>trivial_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_move_constructible<span class="token operator">&lt;</span>trivial_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_copy_assignable<span class="token operator">&lt;</span>trivial_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_move_assignable<span class="token operator">&lt;</span>trivial_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序能通过编译即代表满足要求。如果不满足要求，静态断言求值中第一个表达式求值为 false，则编译错误。显然我们的类型满足要求，我们可以尝试使用一下它：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 创建一个 std::atomic&lt;trivial_type&gt; 对象</span>
std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span>trivial_type<span class="token operator">&gt;</span> atomic_my_type <span class="token punctuation">{</span> trivial_type<span class="token punctuation">{</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20.5f</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 store 和 load 操作来设置和获取值</span>
trivial_type new_value<span class="token punctuation">{</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40.5f</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
atomic_my_type<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>new_value<span class="token punctuation">)</span><span class="token punctuation">;</span>

trivial_type loadedValue <span class="token operator">=</span> atomic_my_type<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;x: &quot;</span> <span class="token operator">&lt;&lt;</span> loadedValue<span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, y: &quot;</span> <span class="token operator">&lt;&lt;</span> loadedValue<span class="token punctuation">.</span>y <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

<span class="token comment">// 使用 exchange 操作</span>
trivial_type exchanged_value <span class="token operator">=</span> atomic_my_type<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>trivial_type<span class="token punctuation">{</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60.5f</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;交换前的 x: &quot;</span> <span class="token operator">&lt;&lt;</span> exchanged_value<span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, 交换前的 y: &quot;</span> <span class="token operator">&lt;&lt;</span> exchanged_value<span class="token punctuation">.</span>y <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;交换后的 x: &quot;</span> <span class="token operator">&lt;&lt;</span> atomic_my_type<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, 交换后的 y: &quot;</span> <span class="token operator">&lt;&lt;</span> atomic_my_type<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),hn={href:"https://godbolt.org/z/jG59c3b9M",target:"_blank",rel:"noopener noreferrer"},fn=o(`<p>没有问题，不过其实我们的 <code>trivial_type</code> 直接改成：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">trivial_type</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">float</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),yn={href:"https://godbolt.org/z/ozPK1qefx",target:"_blank",rel:"noopener noreferrer"},wn=o('<p>也是完全可以的，满足要求。先前只是为了展示一下显式写明的情况。</p><hr><p>原子类型的每个操作函数，都有一个内存序参数，这个参数可以用来指定执行顺序，在后面的内容会详细讲述，现在只需要知道操作分为三类：</p><ol><li><p><strong>Store 操作（存储操作）</strong>：可选的内存序包括 <code>memory_order_relaxed</code>、<code>memory_order_release</code>、<code>memory_order_seq_cst</code>。</p></li><li><p><strong>Load 操作（加载操作）</strong>：可选的内存序包括 <code>memory_order_relaxed</code>、<code>memory_order_consume</code>、<code>memory_order_acquire</code>、<code>memory_order_seq_cst</code>。</p></li><li><p><strong>Read-modify-write（读-改-写）操作</strong>：可选的内存序包括 <code>memory_order_relaxed</code>、<code>memory_order_consume</code>、<code>memory_order_acquire</code>、<code>memory_order_release</code>、<code>memory_order_acq_rel</code>、<code>memory_order_seq_cst</code>。</p></li></ol><blockquote><p>本节主要广泛介绍 <code>std::atomic</code>，而未展开具体使用。在后续章节中，我们将更详细地讨论一些版本，如 <code>std::atomic&lt;bool&gt;</code>，并介绍其成员函数和使用方法。</p></blockquote><h3 id="st-atomic-flag" tabindex="-1"><a class="header-anchor" href="#st-atomic-flag"><span><code>st::atomic_flag</code></span></a></h3><p><code>std::atomic_flag</code> 是最简单的原子类型，这个类型的对象可以在两个状态间切换：<strong>设置（true）<strong>和</strong>清除（false）</strong>。它很简单，通常只是用作构建一些库设施，不会单独使用或直接面向普通开发者。</p>',7),xn=n("code",null,"std::atomic_flag",-1),qn={href:"https://zh.cppreference.com/w/cpp/atomic/ATOMIC_FLAG_INIT",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"ATOMIC_FLAG_INIT",-1),Tn=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>atomic_flag f <span class="token operator">=</span> ATOMIC_FLAG_INIT<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),En=n("code",null,"C++20",-1),On=n("code",null,"std::atomic_flag",-1),An={href:"https://zh.cppreference.com/w/cpp/atomic/atomic_flag/atomic_flag",target:"_blank",rel:"noopener noreferrer"},In=n("code",null,"ATOMIC_FLAG_INIT",-1),Ln=n("code",null,"ATOMIC_FLAG_INIT",-1),zn={href:"https://github.com/microsoft/STL/blob/daeb0a6/stl/inc/atomic#L2807-L2808",target:"_blank",rel:"noopener noreferrer"},Mn=n("code",null,"MSVC STL",-1),Rn=n("code",null,"{}",-1),Fn={href:"https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/atomic_base.h",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"libstdc++",-1),Bn={href:"https://github.com/llvm/llvm-project/blob/00e80fb/clang/lib/Headers/stdatomic.h#L169",target:"_blank",rel:"noopener noreferrer"},Kn=n("code",null,"libc++",-1),Pn=n("code",null,"{ 0 }",-1),Sn=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>atomic_flag f ATOMIC_FLAG_INIT<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>atomic_flag f2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>atomic_flag f3<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>atomic_flag f4<span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 ATOMIC_FLAG_INIT 宏只是为了统一，我们知道即可。</p><p>当标志对象已初始化，它只能做三件事情：<strong>销毁、清除、设置</strong>。这些操作对应的函数分别是：</p><ol><li><strong><code>clear()</code></strong> （清除）：将标志对象的状态原子地更改为清除（false）</li><li><strong><code>test_and_set</code></strong>（测试并设置）：将标志对象的状态原子地更改为设置（true），并返回它先前保有的值。</li><li><strong>销毁</strong>：对象的生命周期结束时，自动调用析构函数进行销毁操作。</li></ol><p>每个操作都可以指定内存顺序。<code>clear()</code> 是一个“读-改-写”操作，可以应用任何内存顺序。默认的内存顺序是 <code>memory_order_seq_cst</code>。例如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>f<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_release<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> r <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">test_and_set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>将 <code>f</code> 的状态原子地更改为清除（false），指明 <code>memory_order_release</code> 内存序。</p></li><li><p>将 <code>f</code> 的状态原子地更改为设置（true），并返回它先前保有的值给 <code>r</code>。使用默认的 <code>memory_order_seq_cst</code> 内存序。</p></li></ol><blockquote><p>不用着急，这里还不是详细展开聊内存序的时候。</p></blockquote>`,8),Dn=n("code",null,"std::atomic_flag",-1),Gn={href:"https://zh.cppreference.com/w/cpp/atomic/atomic_flag/atomic_flag",target:"_blank",rel:"noopener noreferrer"},Un={href:"https://zh.cppreference.com/w/cpp/atomic/atomic_flag/operator%3D",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"std::atomic_flag",-1),Hn=o(`<p>有限的特性使得 <code>std::atomic_flag</code> 非常适合用作制作<strong>自旋锁</strong>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">spinlock_mutex</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>atomic_flag flag<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">spinlock_mutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">noexcept</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">.</span><span class="token function">test_and_set</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_acquire<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
        flag<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_release<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以简单的使用测试一下，它是有效的：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>spinlock_mutex m<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>spinlock_mutex<span class="token operator">&gt;</span> lc<span class="token punctuation">{</span> m <span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;😅😅&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;❤️❤️\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Yn={href:"https://godbolt.org/z/T583YYTh8",target:"_blank",rel:"noopener noreferrer"},jn=o("<p>稍微聊一下原理，我们的 <code>spinlock_mutex</code> 对象中存储的 <code>flag</code> 对象在默认构造时是清除 (<code>false</code>) 状态。在 <code>lock()</code> 函数中调用 <code>test_and_set</code> 函数，它是原子的，只有一个线程能成功调用并将 <code>flag</code> 的状态原子地更改为设置 (<code>true</code>)，并返回它先前的值 (<code>false</code>)。此时，该线程成功获取了锁，退出循环。</p><p>当 <code>flag</code> 对象的状态为设置 (<code>true</code>) 时，其线程调用 <code>test_and_set</code> 函数会返回 <code>true</code>，导致它们继续在循环中自旋，无法退出。直到先前持有锁的线程调用 <code>unlock()</code> 函数，将 <code>flag</code> 对象的状态原子地更改为清除 (<code>false</code>) 状态。此时，等待的线程中会有一个线程成功调用 <code>test_and_set</code> 返回 <code>false</code>，然后退出循环，成功获取锁。</p>",2),Wn=n("code",null,"std::atomic_flag",-1),Xn={href:"https://en.wikipedia.org/wiki/Linus_Torvalds",target:"_blank",rel:"noopener noreferrer"},Jn=n("strong",null,"Linus Torvalds",-1),Qn={href:"https://www.realworldtech.com/forum/?threadid=189711&curpostid=189723",target:"_blank",rel:"noopener noreferrer"},Zn=n("ul",null,[n("li",null,[n("strong",null,"我再说一遍：不要在用户空间中使用自旋锁，除非你真的知道自己在做什么。请注意，你知道自己在做什么的可能性基本上为零。"),s(" I repeat: "),n("strong",null,"do not use spinlocks in user space, unless you actually know what you're doing"),s(". And be aware that the likelihood that you know what you are doing is basically nil.")])],-1),$n=n("p",null,[s("然后就是推荐使用 "),n("code",null,"std::mutex"),s("、"),n("code",null,"pthread_mutex"),s(" ，比自旋好的多。")],-1),ns=o(`<p><code>std::atomic_flag</code> 的局限性太强，甚至不能当普通的 bool 标志那样使用。一般最好使用 <code>std::atomic&lt;bool&gt;</code>，下节，我们来使用它。</p><h3 id="std-atomic-bool" tabindex="-1"><a class="header-anchor" href="#std-atomic-bool"><span><code>std::atomic&lt;bool&gt;</code></span></a></h3><p><code>std::atomic&lt;bool&gt;</code> 是最基本的<strong>整数原子类型</strong> ，它相较于 <code>std::atomic_flag</code> 提供了更加完善的布尔标志。虽然同样不可复制不可移动，但可以使用非原子的 bool 类型进行构造，初始化为 true 或 false，并且能从非原子的 bool 对象赋值给 <code>std::atomic&lt;bool&gt;</code>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> b<span class="token punctuation">{</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),ss={href:"https://zh.cppreference.com/w/cpp/atomic/atomic/operator%3D",target:"_blank",rel:"noopener noreferrer"},as=n("code",null,"operator=",-1),es=n("code",null,"b = false",-1),os=n("code",null,"bool",-1),ts=o(`<blockquote><p>这个行为不仅仅适用于<code>std::atomic&lt;bool&gt;</code>，而是适用于所有<code>std::atomic</code>类型。</p></blockquote><p>如果原子变量的赋值操作返回了一个引用，那么依赖这个结果的代码需要显式地进行加载（load），以确保数据的正确性。例如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span>b <span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 假设返回 atomic 引用</span>
<span class="token keyword">bool</span> flag <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 必须显式调用 load() 加载</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过返回非原子值进行赋值，可以避免多余的加载（load）过程，得到实际存储的值。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> b<span class="token punctuation">{</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> new_value <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// new_value 将是 false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>store</code> 原子的替换当前对象的值，远好于 <code>std::atomic_flag</code> 的 <code>clear()</code>。<code>test_and_set()</code> 也可以换为更加通用常见的 <code>exchange</code>，它可以原子的使用新的值替换已经存储的值，并返回旧值。</p>`,6),ps=n("code",null,"std::atomic<bool>",-1),cs=n("code",null,"load()",-1),ls={href:"https://zh.cppreference.com/w/cpp/atomic/atomic/operator_T",target:"_blank",rel:"noopener noreferrer"},is=o(`<p><code>store</code> 是一个存储操作、<code>load</code> 是一个<em>加载操作</em>、<code>exchange</code> 是一个“<em>读-改-写</em>”操作：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> b<span class="token punctuation">;</span>
<span class="token keyword">bool</span> x <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_acquire<span class="token punctuation">)</span><span class="token punctuation">;</span>
b<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>memory_order_acq_rel<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><code>std::atomic&lt;bool&gt;</code> 提供多个“<em>读-改-写</em>”的操作，exchange 只是其中之一。它还提供了一种存储方式：<strong>当前值与预期一致时，存储新值。</strong></p>`,4),rs={href:"https://zh.cppreference.com/w/cpp/atomic/atomic/compare_exchange",target:"_blank",rel:"noopener noreferrer"},ds=n("code",null,"compare_exchange_weak()",-1),us=n("code",null,"compare_exchang_strong()",-1),ks=o(`<p><strong>compare_exchange_weak</strong>：尝试将原子对象的当前值与预期值进行<em>比较</em><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>，如果相等则将其更新为新值并返回 <code>true</code>；否则，将原子对象的值加载进 expected（进行加载操作）并返回 <code>false</code>。<strong>此操作可能会由于某些硬件的特性而出现<em>假失败</em><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>，需要在循环中重试</strong>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> flag<span class="token punctuation">{</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> expected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">.</span><span class="token function">compare_exchange_weak</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),ms={href:"https://godbolt.org/z/YToPYf3hd",target:"_blank",rel:"noopener noreferrer"},_s=n("p",null,[s("返回 "),n("code",null,"false"),s(" 即代表出现了"),n("em",null,"假失败"),s("，因此需要在循环中重试。。")],-1),vs=o(`<p><strong>compare_exchange_strong</strong>：类似于 <code>compare_exchange_weak</code>，<strong>但不会出现假失败，因此不需要重试</strong>。适用于需要确保操作成功的场合。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> flag<span class="token punctuation">{</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> expected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">try_set_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 尝试将 flag 设置为 true，如果当前值为 false</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">.</span><span class="token function">compare_exchange_strong</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;flag 为 false，设为 true。\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;flag 为 true, expected 设为 true。\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),bs={href:"https://godbolt.org/z/zz4q8vsoe",target:"_blank",rel:"noopener noreferrer"},gs=o("<p>假设有两个线程运行 <code>try_set_flag</code> 函数，那么第一个线程调用 <code>compare_exchange_strong</code> 将原子对象 <code>flag</code> 设置为 <code>true</code>。第二个线程调用 <code>compare_exchange_strong</code>，当前原子对象的值为 <code>true</code>，而 <code>expected</code> 为 <code>false</code>，不相等，将原子对象的值设置给 <code>expected</code>。此时 <code>flag</code> 与 <code>expected</code> 均为 <code>true</code>。</p>",1),hs=o(`<p>与 <code>exchange</code> 的另一个不同是，<code>compare_exchange_weak</code> 和 <code>compare_exchange_strong</code> 允许指定成功和失败情况下的内存序。这意味着你可以根据成功或失败的情况，为原子操作指定不同的内存序。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> data<span class="token punctuation">{</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> expected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// 成功时的内存序为 memory_order_release，失败时的内存序为 memory_order_acquire</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">compare_exchange_weak</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>memory_order_release<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>memory_order_acquire<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 操作成功</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 操作失败</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个简单的原子类型是特化的原子指针，即：<strong><code>std::atomic&lt;T*&gt;</code></strong>，下一节我们来看看它是如何工作的。</p><h3 id="std-atomic-t" tabindex="-1"><a class="header-anchor" href="#std-atomic-t"><span><code>std::atomic&lt;T*&gt;</code></span></a></h3><h3 id="std-atomic-std-shared-ptr" tabindex="-1"><a class="header-anchor" href="#std-atomic-std-shared-ptr"><span><code>std::atomic&lt;std::shared_ptr&gt;</code></span></a></h3><h2 id="内存次序" tabindex="-1"><a class="header-anchor" href="#内存次序"><span>内存次序</span></a></h2><h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h3><p>事实上我们在前面就用到了不少的内存次序，只不过一直没详细展开讲解。</p><p>在开始学习之前，我们需要强调一些基本的认识：</p><ol><li><p><strong>内存次序是非常底层知识</strong>：对于普通开发者来说，了解内存次序并非硬性需求。如果您主要关注业务开发，可以直接跳过本节内容。如果您对内存次序感兴趣，则需要注意其复杂性和难以观察的特性，这将使学习过程具有一定挑战性。</p></li><li><p><strong>内存次序错误的使用难以察觉</strong>：即使通过多次（数以万计）运行也难以发现。这是因为许多内存次序问题是由于极端的、少见的情况下的竞争条件引起的，而这些情况很难被重现。此外，即使程序在某些平台上运行正常，也不能保证它在其他平台上也能表现良好，因为不同的 CPU 和编译器可能对内存操作的顺序有不同的处理（例如 x86 架构内存模型：Total Store Order (TSO)，是比较严格的内存模型）。因此，开发者必须依赖自己的知识和经验，以及可能的测试和调试技术，来发现和解决内存次序错误。</p></li></ol><p>错误难以被我们观察到的原因其实可以简单的说：</p><ul><li><strong>CPU 与编译器不是神经病，没有<em>好处</em>不会闲的没事给你指令重排</strong>。</li></ul><hr>`,13),fs={href:"https://zh.cppreference.com/w/cpp/language/as_if",target:"_blank",rel:"noopener noreferrer"},ys=n("strong",null,"如同规则",-1),ws=n("li",null,[n("p",null,"CPU 重排：CPU 在运行程序时，也会对指令进行重排，以提高执行效率，减少等待时间。这种重排通常遵循一些硬件层面的优化规则，如内存访问的优化。")],-1),xs=o(`<p>你们可能还有疑问：“<strong>单线程能不能指令重排</strong>？”</p><p>CPU 的指令重排必须遵循一定的规则，以确保程序的可观察副作用不受影响。对于单线程程序，CPU 会保证外部行为的一致性。对于多线程程序，需要开发者使用同步原语来显式地控制内存操作的顺序和可见性，确保多线程环境下的正确性。而标准库中提供的原子对象的原子操作，还可以设置内存次序。</p><p>那有没有可能：</p><ul><li>“<em>end 重排到 start 前面了！指令重排了！</em>”</li></ul><p>这也就是前面说的，把 CPU 与编译器当神经病。各位写代码难道还要考虑下面这段，会不会指令重排导致先输出 <code>end</code> 吗？这显然不现实。</p><div class="language-txt line-numbers-mode" data-ext="txt" data-title="txt"><pre class="language-txt"><code>print(&quot;start&quot;); // 1
print(&quot;end&quot;);   // 2 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不禁止就是有可能，但是我们无需在乎，<strong>就算真的 CPU 将 end 重排到 start 前面了，也得在可观测行为发生前回溯了</strong>。所以我一直在强调，这些东西，<strong>我们无需在意</strong>。</p><p>好了，到此，基本认识也就足够了，以上的示例更多的是泛指，知到其表达的意思就好，这些还是简单直接且符合直觉的。</p><hr class="footnotes-sep">`,9),qs={class:"footnotes"},Cs={class:"footnotes-list"},Ts={id:"footnote1",class:"footnote-item"},Es={href:"https://zh.cppreference.com/w/cpp/string/byte/memcmp",target:"_blank",rel:"noopener noreferrer"},Os={href:"https://zh.cppreference.com/w/cpp/string/byte/memcpy",target:"_blank",rel:"noopener noreferrer"},As=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),Is=n("li",{id:"footnote2",class:"footnote-item"},[n("p",null,[s("注：即使 expected 与原子对象的值相等，表现如同 "),n("code",null,"*this != expected"),s(),n("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎")])],-1);function Ls(zs,Ms){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[s("线程 C 到底读取到多少不确定，a 的值是多少也不确定。显然，这构成了数据竞争，出现了"),n("a",d,[s("未定义行为"),e(a)]),s("。")]),u,n("p",null,[s("不过这显然不是我们的重点。我们想要的是一种"),k,s("，它的所有操作都直接是"),m,s("的，不需要额外的同步设施进行保护。C++11 引入了原子类型 "),n("a",_,[v,e(a)]),s("，在下节我们会详细讲解。")]),b,n("p",null,[s("标准原子类型定义在头文件 "),n("a",g,[h,e(a)]),s(" 中。这些类型的操作都是原子的，语言定义中只有这些类型的操作是原子的，虽然也可以用互斥量来模拟原子操作（见上文）。标准的原子的类型实现可能是："),f]),y,n("p",null,[s("在 C++17 中，所有原子类型都有一个 "),w,s(" 的数据成员 "),n("a",x,[q,e(a)]),s(" 。如果当前环境上的原子类型 X 是无锁类型，那么 "),C,s(" 将返回 "),T,s(" 。例如：")]),E,n("p",null,[s("标准库还提供了一组宏 "),n("a",O,[A,e(a)]),s(" ，在编译时对各种整数原子类型是否无锁进行判断。")]),I,n("blockquote",null,[n("p",null,[n("a",L,[s("运行"),e(a)]),s("测试。")])]),z,n("p",null,[s("除了直接使用 "),M,s(" 模板外，也可以使用原子类型的别名。这个数量非常之多，见 "),n("a",R,[s("MSVC STL"),e(a)]),s("。")]),F,n("p",null,[s("通常 "),N,s(" 对象不可进行复制、移动、赋值，因为它们的"),n("a",B,[s("复制构造"),e(a)]),s("与"),n("a",K,[s("复制赋值运算符"),e(a)]),s("被定义为"),n("a",P,[s("弃置"),e(a)]),s("的。不过可以"),S,s("成对应的内置类型，因为它有"),n("a",D,[s("转换函数"),e(a)]),s("。")]),G,n("p",null,[s("可以使用 "),U,s("、"),V,s("、"),H,s("、"),Y,s(" 和 "),j,s(" 等成员函数对 "),W,s(" 进行操作。如果是"),n("a",X,[s("整数类型"),e(a)]),s("的特化，还支持 "),J,s("、"),Q,s("、"),Z,s("、"),$,s("、"),nn,s("、"),sn,s("、"),an,s(" 、"),en,s("、"),on,s(" 等操作方式。在后面详细的展开使用。")]),tn,n("p",null,[s("模板 "),pn,s(" 可用任何满足"),n("a",cn,[ln,e(a)]),s("及"),n("a",rn,[dn,e(a)]),s("的"),n("a",un,[kn,e(a)]),s("类型 "),mn,s(" 实例化。")]),_n,n("p",null,[s("验证自己的类型是否满足 "),vn,s(" 要求，我们可以使用"),n("a",bn,[s("静态断言"),e(a)]),s("：")]),gn,n("blockquote",null,[n("p",null,[n("a",hn,[s("运行"),e(a)]),s("测试。")])]),fn,n("blockquote",null,[n("p",null,[n("a",yn,[s("运行"),e(a)]),s("测试。")])]),wn,n("p",null,[s("在 C++20 之前，"),xn,s(" 类型的对象需要以 "),n("a",qn,[Cn,e(a)]),s(' 初始化，可以确保此时对象处于 "清除"（false）状态。')]),Tn,n("p",null,[s("在 "),En,s(" 中 "),On,s(" 的默认"),n("a",An,[s("构造函数"),e(a)]),s("保证对象为“清除”（false）状态，就不再需要使用 "),In,s("。")]),n("p",null,[Ln,s(" 其实并不是什么复杂的东西，它在不同的标准库实现中只是简单的初始化：在 "),n("a",zn,[Mn,e(a)]),s(" 它只是一个 "),Rn,s("，在 "),n("a",Fn,[Nn,e(a)]),s(" 与 "),n("a",Bn,[Kn,e(a)]),s(" 它只是一个 "),Pn,s("。也就是说我们可以这样初始化：")]),Sn,n("p",null,[Dn,s(),n("a",Gn,[s("不可复制"),e(a)]),s("不可移动"),n("a",Un,[s("不可赋值"),e(a)]),s("。这不是 "),Vn,s(" 特有的，而是所有原子类型共有的属性。原子类型的所有操作都是原子的，而赋值和复制涉及两个对象，破坏了操作的原子性。复制构造和复制赋值会先读取第一个对象的值，然后再写入另一个对象。对于两个独立的对象，这里实际上有两个独立的操作，合并这两个操作无法保证其原子性。因此，这些操作是不被允许的。")]),Hn,n("blockquote",null,[n("p",null,[n("a",Yn,[s("运行"),e(a)]),s("测试。")])]),jn,n("blockquote",null,[n("p",null,[s("值得注意的是，我们只是稍微的讲一下使用 "),Wn,s(" 实现自旋锁。不过并不推荐各位在实践中使用它，具体可参见 "),n("a",Xn,[Jn,e(a)]),s(" 的"),n("a",Qn,[s("文章"),e(a)]),s("。其中有一段话说得很直接：")]),Zn,$n]),ns,n("p",null,[s("不过这个 "),n("a",ss,[as,e(a)]),s(" 不同于通常情况，赋值操作 "),es,s(" 返回一个普通的 "),os,s(" 值。")]),ts,n("p",null,[s("获取 "),ps,s(" 的值有两种方式，调用 "),cs,s(" 函数，或者"),n("a",ls,[s("隐式转换"),e(a)]),s("。")]),is,n("p",null,[s("这种操作叫做“比较/交换”，它的形式表现为 "),n("a",rs,[ds,e(a)]),s(" 和 "),us]),n("ul",null,[n("li",null,[ks,n("blockquote",null,[n("p",null,[n("a",ms,[s("运行"),e(a)]),s("测试。")])]),_s]),n("li",null,[vs,n("blockquote",null,[n("p",null,[n("a",bs,[s("运行"),e(a)]),s("测试。")])]),gs])]),hs,n("ul",null,[n("li",null,[n("p",null,[s("编译器重排：编译器在编译代码时，为了提高性能，可以按照一定规则重新安排代码的执行顺序。例如，可以将不相关的指令重排，使得 CPU 流水线更加高效地执行指令。编译器优化需要遵守一个“"),n("a",fs,[ys,e(a)]),s("（as-if rule）”，即不可改变可观察的副作用。")])]),ws]),xs,n("section",qs,[n("ol",Cs,[n("li",Ts,[n("p",null,[s("注： 比较和复制是逐位的（类似 "),n("a",Es,[s("std::memcmp"),e(a)]),s(" 和 "),n("a",Os,[s("std::memcpy"),e(a)]),s("）；不使用构造函数、赋值运算符或比较运算符。 "),As])]),Is])])])}const Ns=t(i,[["render",Ls],["__file","05内存模型与原子操作.html.vue"]]),Bs=JSON.parse('{"path":"/md/05%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C.html","title":"内存模型与原子操作","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"原子操作","slug":"原子操作","link":"#原子操作","children":[{"level":3,"title":"原子类型 std::atomic","slug":"原子类型-std-atomic","link":"#原子类型-std-atomic","children":[]},{"level":3,"title":"st::atomic_flag","slug":"st-atomic-flag","link":"#st-atomic-flag","children":[]},{"level":3,"title":"std::atomic<bool>","slug":"std-atomic-bool","link":"#std-atomic-bool","children":[]},{"level":3,"title":"std::atomic<T*>","slug":"std-atomic-t","link":"#std-atomic-t","children":[]},{"level":3,"title":"std::atomic<std::shared_ptr>","slug":"std-atomic-std-shared-ptr","link":"#std-atomic-std-shared-ptr","children":[]}]},{"level":2,"title":"内存次序","slug":"内存次序","link":"#内存次序","children":[{"level":3,"title":"前言","slug":"前言","link":"#前言","children":[]}]}],"git":{"createdTime":1715425898000,"updatedTime":1716971842000,"contributors":[{"name":"mq白","email":"3326284481@qq.com","commits":13},{"name":"归故里","email":"3326284481@qq.com","commits":3}]},"readingTime":{"minutes":17.97,"words":5390},"filePathRelative":"md/05内存模型与原子操作.md","localizedDate":"2024年5月11日","excerpt":"\\n<ul>\\n<li>\\n<p>内存模型定义了多线程程序中，读写操作如何在不同线程之间可见，以及这些操作在何种顺序下执行。内存模型确保程序的行为在并发环境下是可预测的。</p>\\n</li>\\n<li>\\n<p>原子操作即<strong>不可分割的操作</strong>。系统的所有线程，不可能观察到原子操作完成了一半。</p>\\n</li>\\n</ul>\\n<p>最基础的概念就是如此，这里不再过多赘述，后续还会详细展开内存模型的问题。</p>\\n<h2>原子操作</h2>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">int</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">f</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token operator\\">++</span>a<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{Ns as comp,Bs as data};
